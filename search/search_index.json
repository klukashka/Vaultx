{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Vaultx","text":"<p> Vaultx is a Python 3.x client for HashiCorp's Vault. It is based on httpx and provides both sync and async clients. </p> <p> </p> <p>Documentation: https://klukashka.github.io/Vaultx/</p> <p>Source code:: https://github.com/klukashka/Vaultx/</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install vaultx\n</code></pre> <p>Note: Vaultx is inspired by hvac. Architecture and interface are taken from there.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Supports async</li> <li>Based on httpx</li> <li>Supports hvac interface</li> <li>Faster than hvac</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Overview</li> <li>Getting Started</li> <li>Usage</li> <li>Async Support</li> <li>Contribute</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to contribute, follow the Contribution Guide.</p>"},{"location":"contribute/guidelines/","title":"Contributing Guidelines","text":"<p>Thank you for your interest in contributing to Vaultx!</p> <p>Please take a moment to review the following guidelines before submitting your contribution.</p>"},{"location":"contribute/guidelines/#getting-started","title":"Getting Started","text":"<p>Setup your development environment: Setup guide.</p>"},{"location":"contribute/guidelines/#submitting-contributions","title":"Submitting Contributions","text":"<p>When submitting your contribution, please ensure the following:</p> <ul> <li>Minimized count of commits.</li> <li>Your code follows our code style guidelines.</li> <li>Your changes are well-documented and include any necessary updates to the project's documentation.</li> <li>Your changes do not introduce any breaking changes or regressions.</li> <li>Provided descriptive commits' titles. Use emoji notation:</li> </ul> Topic Alias Version tag \ud83d\udd16 <code>:bookmark:</code> New feature \u2728 <code>:sparkles:</code> Bugfix \ud83d\udc1b <code>:bug:</code> Documentation \ud83d\udcda <code>:books:</code> Performance \ud83c\udfc7 <code>:racehorse:</code> Tests \u2705 <code>:white_check_mark:</code> General update \ud83d\ude80 <code>:rocket:</code> Improve format/structure \ud83c\udfa8 <code>:art:</code> Refactor code \ud83d\udd28 <code>:hammer:</code> Removing code/files \ud83d\udd25 <code>:fire:</code> Continuous Integration \ud83d\udc77 <code>:construction_worker:</code> Security \ud83d\udd12 <code>:lock:</code> Upgrading dependencies \u2b06\ufe0f <code>:arrow_up:</code> Downgrading dependencies \u2b07\ufe0f <code>:arrow_down:</code> Critical hotfix \ud83d\ude91 <code>:ambulance:</code> Configuration files \ud83d\udd27 <code>:wrench:</code> Reverting changes \u23ea <code>:rewind:</code> Breaking changes \ud83d\udca5 <code>:boom:</code> Movements \ud83d\ude9a <code>:truck:</code>"},{"location":"contribute/guidelines/#code-style","title":"Code Style","text":"<p>We follow a specific code style in our project. Please make sure to adhere to the following guidelines:</p> <ul> <li>Follow all PEP8 guidelines.</li> <li>Use meaningful variable and function names.</li> <li>Avoid of addition comments.</li> <li>Add docstrings for all public interfaces.</li> <li>Follow the main Clean Code patterns.</li> </ul>"},{"location":"contribute/guidelines/#testing","title":"Testing","text":"<p>We highly encourage contributors to write tests for their code. Please ensure that your changes are thoroughly tested and that all existing tests pass.</p> <p>Our goal is to have 100% of code coverage (for public interfaces).</p>"},{"location":"contribute/guidelines/#documentation","title":"Documentation","text":"<p>Documentation deploys automatically via pushing to main.</p> <p>Improving the project's documentation is always appreciated. If you make any changes that require updates to the documentation, please include those updates in your contribution.</p>"},{"location":"contribute/guidelines/#issue-reporting","title":"Issue Reporting","text":"<p>If you encounter any issues or have any suggestions for improvement, please open an issue on our issue tracker.</p> <p>Provide as much detail as possible to help us understand and address the problem.</p>"},{"location":"contribute/setup/","title":"Environment setup","text":""},{"location":"contribute/setup/#clone-repository","title":"Clone repository","text":"<ul> <li>Via https: <code>git clone https://github.com/klukashka/Vaultx.git</code></li> <li>Via ssh: <code>git@github.com:klukashka/Vaultx.git</code></li> <li>Via GitHub CLI: <code>gh repo clone klukashka/Vaultx</code></li> </ul>"},{"location":"contribute/setup/#install-poetry","title":"Install poetry","text":"<ul> <li>MacOS / *nix: <code>curl -sSL https://install.python-poetry.org | python3 -</code></li> <li>Windows: <code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -</code></li> </ul> <p>Once Poetry is installed you can execute the following:</p> <pre><code>poetry --version\n</code></pre>"},{"location":"contribute/setup/#install-dev-dependencies","title":"Install dev-dependencies","text":"<p>Note</p> <p>Assumed that you are in the directory with the project</p> <p>We implemented two versions of required dependencies:</p> <ol> <li><code>poetry install</code> \u2014 default dependencies that installs with package via pip.</li> <li><code>poetry install --with dev</code> \u2014 dependencies that installs with package via pip AND tools for testing, deploying documentation, deploying on PyPI.</li> </ol> <p>You should use the second option.</p>"},{"location":"overview/async_support/","title":"Async Support","text":""},{"location":"overview/async_support/#about-async","title":"About Async","text":"<p>Vaultx offers a standard synchronous API by default, but also gives you the option of an async client if you need it. Async is a concurrency model that is far more efficient than multi-threading,  and can provide significant performance benefits (check out benchmarks).</p> <p>If you are working with async, you'll also want to use Vaultx's async client.</p>"},{"location":"overview/async_support/#usage","title":"Usage","text":"<p>Use async client via context manager or just remember to close it.</p> <pre><code>async def some_function():\n    async with vaultx.AsyncClient(url='https://localhost:8200') as client:\n        await client.is_authenticated()\n</code></pre> <pre><code>async def some_function():\n    client = vaultx.AsyncClient(url='https://localhost:8200')\n    await client.is_authenticated()\n    await client.close()\n</code></pre> <p>Here is another example:</p> <pre><code>import vaultx\n\n\nasync def very_important_func():\n    client = vaultx.AsyncClient(url='http://localhost:8200', token='root')\n    await client.auth.approle.create_or_update_approle(\"testrole\")\n    create_result = await client.auth.approle.generate_secret_id(\n        \"testrole\", {\"foo\": \"bar\"}\n    )\n    secret_id = create_result[\"data\"][\"secret_id\"]\n    result = await client.auth.approle.read_secret_id(\"testrole\", secret_id)\n    await client.auth.approle.destroy_secret_id(\"testrole\", secret_id)\n\n    await client.close()\n</code></pre>"},{"location":"overview/getting_started/","title":"Getting Started","text":""},{"location":"overview/getting_started/#initialize-the-client-using-tls","title":"Initialize the Client using TLS","text":"<pre><code>client = vaultx.Client(url='https://localhost:8200', token=os.environ['VAULT_TOKEN'],)\nclient.is_authenticated()\n</code></pre>"},{"location":"overview/getting_started/#read-and-write-to-secrets-engines","title":"Read and Write to Secrets Engines","text":""},{"location":"overview/getting_started/#kv-secrets-engines-v2","title":"KV Secrets Engines - V2","text":"<p>Let's write down a secret, read it and then delete:</p> <pre><code>create_response = client.secrets.kv.v2.create_or_update_secret(\n    path='foo',\n    secret=dict(baz='bar'),\n)\n\nread_response = client.secrets.kv.read_secret_version(path='foo')\nprint(read_response[\"data\"][\"data\"])\n\n# -&gt; {'baz': 'bar'}\n\nclient.secrets.kv.delete_metadata_and_all_versions('foo')\n</code></pre>"},{"location":"overview/getting_started/#kv-secrets-engines-v1","title":"KV Secrets Engines - V1","text":"<p>Preferred usage:</p> <pre><code>create_response = client.secrets.kv.v1.create_or_update_secret('foo', secret=dict(baz='bar'))\n\nread_response = client.secrets.kv.v1.read_secret('foo')\nprint(read_response[\"data\"][\"data\"])\n\n# -&gt; {'baz': 'bar'}\n\ndelete_response = client.secrets.kv.v1.delete_secret('foo')\n</code></pre>"},{"location":"overview/getting_started/#async-support","title":"Async Support","text":"<p>Note: Asynchronous client supports the same methods as the synchronous one does. Use it via context manager or just remember to close it.</p> <pre><code>async def some_function():\n    async with vaultx.AsyncClient(url='https://localhost:8200') as client:\n        await client.is_authenticated()\n</code></pre> <pre><code>async def some_function():\n    client = vaultx.AsyncClient(url='https://localhost:8200')\n    await client.is_authenticated()\n    await client.close()\n</code></pre> <p>Check out how fast it is!</p> <pre><code>import vaultx\nimport time\nimport asyncio\n\n\nURL = \"http://127.0.0.1:8200\"\nTOKEN = \"root\"\nPATH = \"testing_with_aiohttp\"\nsome_resource = {\"some_text\": \"another_text\", \"you\": 42, 1: 3, 5: None}\nn = 100\n\n\nasync def do_for_async_vaultx():\n    tasks = []\n    async with vaultx.AsyncClient(url=URL, token=TOKEN) as async_vaultx_client:\n        start = time.time()\n        for _ in range(n):\n            tasks.append(async_vaultx_client.is_authenticated())\n            tasks.append(async_vaultx_client.secrets.kv.v2.create_or_update_secret(path=PATH, secret=some_resource))\n            tasks.append(async_vaultx_client.secrets.kv.v2.read_secret_version(path=PATH))\n        await asyncio.gather(*tasks)\n    print(f\"async vaultx took {time.time() - start} for {n} requests\")\n\n\nasyncio.run(do_for_async_vaultx())\n</code></pre>"},{"location":"overview/why_vaultx/","title":"Why Vaultx?","text":"<p>Note: Vaultx is inspired by hvac. Architecture and interface are taken from there.</p>"},{"location":"overview/why_vaultx/#there-are-several-reasons-for-that","title":"There are several reasons for that","text":"<ul> <li>Based on httpx. Vaultx uses httpx instead of requests. This means you will receive responses faster.</li> <li>Has async client implementation. It has the same interface and supports the same methods which synchronous one does.</li> <li>Has the same interface as httpx, so it will be easier to integrate it into your code.</li> </ul>"},{"location":"overview/why_vaultx/#lets-check-out-benchmarks","title":"Let's check out benchmarks","text":"<p>We'll compare HVAC, Vaultx and Async Vaultx in average performance. The tasks are simple: to write and to read. There will be 11 epochs (number of operations): [1, 5, 10, 20, 50, 100, 200, 350, 500, 750, 1000].  Each epoch will be repeated 5 times (repeats) to measure the average performance. Here is the code:</p> Code <pre><code>import asyncio\nimport time\n\nimport hvac\n\nimport vaultx\n\n\nresource = {\n    \"config\": {\n        \"name\": \"John Doe\",\n        \"age\": 42,\n        \"Address\": {\"ADDRESS\": \"123 Main St\", \"city\": None},\n        \"preferences\": {\"FaVoriteS\": [\"a\", \"b\", \"c\"]},\n        \"is_active\": True,\n    }\n}\n\n\nURL = \"http://127.0.0.1:8200\"\nTOKEN = \"root\"\nPATH = \"testing_with_aiohttp\"\n\n\ndef do_for_hvac(n: int):\n    hvac_client = hvac.Client(url=URL, token=TOKEN)\n    start = time.time()\n    for _ in range(n):\n        hvac_client.is_authenticated()\n        hvac_client.secrets.kv.v2.create_or_update_secret(path=PATH, secret=resource)\n        hvac_client.secrets.kv.v2.read_secret_version(path=PATH, raise_on_deleted_version=False)\n    total_time = time.time() - start\n    print(f\"hvac took {total_time} for {n} requests\")\n    return total_time\n\n\ndef do_for_vaultx(n: int):\n    with vaultx.Client(url=URL, token=TOKEN) as vaultx_client:\n        start = time.time()\n        for _ in range(n):\n            vaultx_client.is_authenticated()\n            vaultx_client.secrets.kv.v2.create_or_update_secret(path=PATH, secret=resource)\n            vaultx_client.secrets.kv.v2.read_secret_version(path=PATH)\n    total_time = time.time() - start\n    print(f\"vaultx took {total_time} for {n} requests\")\n    return total_time\n\n\nasync def do_for_async_vaultx(n: int):\n    tasks = []\n    async_vaultx_client = vaultx.AsyncClient(url=URL, token=TOKEN)\n    start = time.time()\n    for _ in range(n):\n        tasks.append(async_vaultx_client.is_authenticated())\n        tasks.append(async_vaultx_client.secrets.kv.v2.create_or_update_secret(path=PATH, secret=resource))\n        tasks.append(async_vaultx_client.secrets.kv.v2.read_secret_version(path=PATH))\n    await asyncio.gather(*tasks)\n    await async_vaultx_client.close()\n    total_time = time.time() - start\n    print(f\"async vaultx took {total_time} for {n} requests\")\n    return total_time\n\n\nresults = [[] for _ in range(3)]\n\nepochs = [1, 5, 10, 20, 50, 100, 200, 350, 500, 750, 1000]\nrepeats = 5\nfor iterations in epochs:\n    for i, function in enumerate((do_for_hvac, do_for_vaultx, do_for_async_vaultx)):\n        time.sleep(1)\n        average = 0\n        for _ in range(repeats):\n            time.sleep(0.5)\n            if function.__name__ != \"do_for_async_vaultx\":\n                average += function(iterations)\n            else:\n                average += asyncio.run(function(iterations))\n        results[i].append(average / repeats)\n\nprint(results)\n</code></pre> <p>You can try it yourself by running the server locally in terminal via <code>vault server -dev -dev-root-token-id=\"root\" -address=\"http://127.0.0.1:8200\"</code>.</p> <p>The benchmarks are run on Ubuntu 24.04.2 LTS with Intel\u00ae Core\u2122 i5-7300U \u00d7 4 CPU and 12.0 GiB Memory. The results are:</p> Results <pre><code>results = [\n    [0.017037343978881837, 0.07232718467712403, 0.14330039024353028, 0.26955699920654297, 0.6601319789886475, 1.1966200351715088, 1.9504114627838134, 3.431483840942383, 4.743838691711426, 7.084809923171997, 8.356381607055663], \n    [0.013585186004638672, 0.049878406524658206, 0.10232477188110352, 0.19789347648620606, 0.48628926277160645, 0.7989840030670166, 1.6327192306518554, 3.0580058097839355, 4.089705991744995, 6.210736465454102, 6.706547641754151],\n    [0.013380289077758789, 0.0471491813659668, 0.10409841537475586, 0.14378628730773926, 0.2310150146484375, 0.3415419578552246, 0.5561285495758057, 0.8834378242492675, 1.2136030197143555, 1.7599134922027588, 2.2954917907714845]\n]\n</code></pre> <p>Let's make a graph and its logarithmic version for the better visibility:</p> <p> </p>"},{"location":"usage/auth_methods/approle/","title":"AppRole","text":""},{"location":"usage/auth_methods/approle/#enabling","title":"Enabling","text":"<p><code>vaultx.api.auth_methods.approle.enable_auth_method()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.enable_auth_method(\n    method_type='approle',\n)\n\n# Mount approle auth method under a different path:\nclient.sys.enable_auth_method(\n    method_type='approle',\n    path='my-approle',\n)\n</code></pre>"},{"location":"usage/auth_methods/approle/#authentication","title":"Authentication","text":"<p><code>vaultx.api.auth_methods.AppRole.login()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.approle.login(\n    role_id='&lt;some_role_id&gt;',\n    secret_id='&lt;some_secret_id&gt;',\n)\n</code></pre>"},{"location":"usage/auth_methods/approle/#create-or-update-approle","title":"Create or Update AppRole","text":"<p><code>vaultx.api.auth_methods.AppRole.login()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.approle.login(\n    role_id='&lt;some_role_id&gt;',\n    secret_id='&lt;some_secret_id&gt;',\n)\n</code></pre>"},{"location":"usage/auth_methods/approle/#create-or-update-role","title":"Create or Update Role","text":"<p><code>vaultx.api.auth_methods.AppRole.create_or_update_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.approle.create_or_update_approle(\n    role_name='some-role',\n    token_policies=['some-policy'],\n    token_type='service',\n)\n</code></pre>"},{"location":"usage/auth_methods/approle/#read-role-id","title":"Read Role ID","text":"<p><code>vaultx.api.auth_methods.AppRole.read_role_id()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nresp = client.auth.approle.read_role_id(\n    role_name='some-role',\n)\nprint(f'AppRole role ID for some-role: {resp[\"data\"][\"role_id\"]}')\n</code></pre>"},{"location":"usage/auth_methods/approle/#generate-secret-id","title":"Generate Secret ID","text":"<p><code>vaultx.api.auth_methods.AppRole.generate_secret_id()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nresp = client.auth.approle.generate_secret_id(\n    role_name='some-role',\n    cidr_list=['127.0.0.1/32'],\n)\nprint(f'AppRole secret ID for some-role: {resp[\"data\"][\"secret_id\"]}')\n</code></pre>"},{"location":"usage/auth_methods/aws/","title":"AWS","text":""},{"location":"usage/auth_methods/aws/#iam-authentication","title":"IAM Authentication","text":"<p><code>vaultx.api.auth_methods.Aws.iam_login()</code></p>"},{"location":"usage/auth_methods/aws/#static-access-key-strings","title":"Static Access Key Strings","text":"<p>Various examples of authenticating with static access key strings:</p> <pre><code>import vaultx\n\nclient = vaultx.Client()\n\nclient.auth.aws.iam_login('MY_AWS_ACCESS_KEY_ID', 'MY_AWS_SECRET_ACCESS_KEY')\nclient.auth.aws.iam_login('MY_AWS_ACCESS_KEY_ID', 'MY_AWS_SECRET_ACCESS_KEY', 'MY_AWS_SESSION_TOKEN')\nclient.auth.aws.iam_login('MY_AWS_ACCESS_KEY_ID', 'MY_AWS_SECRET_ACCESS_KEY', role='MY_ROLE')\n</code></pre>"},{"location":"usage/auth_methods/aws/#boto3-session","title":"Boto3 Session","text":"<p>Retrieving credentials from a boto3 Session object:</p> <pre><code>import boto3\nimport vaultx\n\nsession = boto3.Session()\ncredentials = session.get_credentials()\n\nclient = vaultx.Client()\nclient.auth.aws.iam_login(credentials.access_key, credentials.secret_key, credentials.token)\n</code></pre>"},{"location":"usage/auth_methods/aws/#lambda-andor-ec2-instance","title":"Lambda and/or EC2 Instance","text":"<pre><code>import os\nimport vaultx\n\n\ndef infer_credentials_from_iam_role(iam_role):\n    on_lambda = 'AWS_LAMBDA_FUNCTION_NAME' in os.environ\n    if on_lambda:\n        return os.environ['AWS_ACCESS_KEY_ID'], os.environ['AWS_SECRET_ACCESS_KEY'], os.environ['AWS_SESSION_TOKEN']\n    else:\n        security_credentials = load_aws_ec2_role_iam_credentials(iam_role)\n        return security_credentials['AccessKeyId'], security_credentials['SecretAccessKey']\n\n\naccess_key_id, secret_access_key, session_token = infer_credentials_from_iam_role('some-role')\n\nclient = vaultx.Client()\nclient.auth.aws.iam_login(access_key_id, secret_access_key, session_token)\n</code></pre>"},{"location":"usage/auth_methods/aws/#caveats-for-non-default-aws-regions","title":"Caveats For Non-Default AWS Regions","text":"<p>I.e., calling vaultx.api.auth_methods.Aws.iam_login() with a region argument other than its default of \u201cus-east-1\u201d. For additional background / context on this matter, see the comments at vaultx#251 and/or vault-ruby#161.</p> <p>The following code snippets are for authenticating hosts in the us-west-1 region:</p> <p>Note: In order to authenticate to various regions, the AWS auth method configuration needs to be set up with an \u201cendpoint URL\u201d corresponding to the region in question. E.g.: \u201chttps://sts.us-west-1.amazonaws.com\u201d in the case of this example. Vault defaults to an endpoint of \u201chttps://sts.amazonaws.com\u201d if not configured with a different endpoint URL.</p> <pre><code>import boto3\nimport os\nimport vaultx\n\nVAULT_ADDR = os.environ[\"VAULT_ADDR\"]\nVAULT_HEADER_VALUE = os.environ[\"VAULT_HEADER_VALUE\"]\n\nclient = vaultx.Client(url=VAULT_ADDR)\n\n# One-time setup of the credentials / configuration for the Vault server to use.\n# Note the explicit region subdomain bit included in the endpoint argument.\nclient.auth.aws.configure(\n    access_key='SOME_ACCESS_KEY_FOR_VAULTS_USE',\n    secret_key='SOME_ACCESS_KEY_FOR_VAULTS_USE',\n    endpoint='https://sts.us-west-1.amazonaws.com',\n)\n\nsession = boto3.Session()\ncreds = session.get_credentials().get_frozen_credentials()\nclient.auth.aws.iam_login((\n    access_key=creds.access_key,\n    secret_key=creds.secret_key,\n    session_token=creds.token,\n    header_value=VAULT_HEADER_VALUE,\n    role='some-role,\n    use_token=True,\n    region='us-west-1',\n)\n</code></pre>"},{"location":"usage/auth_methods/aws/#ec2-authentication","title":"EC2 Authentication","text":"<p><code>vaultx.api.auth_methods.Aws.ec2_login()</code></p>"},{"location":"usage/auth_methods/aws/#ec2-metadata-service","title":"EC2 Metadata Service","text":"<p>Authentication using EC2 instance role credentials and the EC2 metadata service</p> <pre><code>import logging.handlers\nimport os\n\nimport vaultx\nimport httpx\n\n\nlogger = logging.getLogger(__name__)\n\nVAULT_URL = os.getenv('VAULT_ADDR', 'https://127.0.0.1:8200')\nVAULT_CERTS = ('/etc/vault.d/ssl/bundle.crt', '/etc/vault.d/ssl/vault.key')\nTOKEN_NONCE_PATH = os.getenv('WP_VAULT_TOKEN_NONCE_PATH', '/root/.vault-token-meta-nonce')\nEC2_METADATA_URL_BASE = 'http://169.254.169.254'\n\n\ndef load_aws_ec2_pkcs7_string(metadata_url_base: str = EC2_METADATA_URL_BASE) -&gt; str:\n    \"\"\"\n    Requests an ec2 instance's pkcs7-encoded identity document from the EC2 metadata service.\n    :param metadata_url_base: IP address for the EC2 metadata service.\n    :return: string, pkcs7-encoded identity document from the EC2 metadata service\n    \"\"\"\n    metadata_pkcs7_url = f'{metadata_url_base}/latest/dynamic/instance-identity/pkcs7'\n    logger.debug(f\"load_aws_ec2_pkcs7_string connecting to {metadata_pkcs7_url}\")\n\n    response = httpx.get(url=metadata_pkcs7_url)\n    response.raise_for_status()\n\n    pcks7 = response.text.replace('\\n', '')\n\n    return pcks7\n\n\ndef load_aws_ec2_nonce_from_disk(token_nonce_path: str = TOKEN_NONCE_PATH) -&gt; bytes:\n    \"\"\"\n    Helper method to load a previously stored \"token_meta_nonce\" returned in the\n    initial authorization AWS EC2 request from the current instance to our Vault service.\n    :param token_nonce_path: string, the full filesystem path to a file containing the instance's\n        token meta nonce.\n    :return: string, a previously stored \"token_meta_nonce\"\n    \"\"\"\n    logger.debug(f\"Attempting to load vault token meta nonce from path: {token_nonce_path}\")\n    try:\n        with open(token_nonce_path, 'rb') as nonce_file:\n            nonce = nonce_file.readline()\n    except IOError:\n        logger.warning(f\"Unable to load vault token meta nonce at path: {token_nonce_path}\")\n        nonce = None\n\n    logger.debug(f\"Nonce loaded: {nonce}\")\n    return nonce\n\n\ndef write_aws_ec2_nonce_to_disk(token_meta_nonce: str, token_nonce_path: str = TOKEN_NONCE_PATH) -&gt; None:\n    \"\"\"\n    Helper method to store the current \"token_meta_nonce\" returned from authorization AWS EC2 request\n    from the current instance to our Vault service.\n    :return: string, a previously stored \"token_meta_nonce\"\n    :param token_meta_nonce: string, the actual nonce\n    :param token_nonce_path: string, the full filesystem path to a file containing the instance's\n        token meta nonce.\n    :return: None\n    \"\"\"\n    logger.debug(f'Writing nonce \"{token_meta_nonce}\" to file \"{token_nonce_path}\".')\n    with open(token_nonce_path, 'w') as nonce_file:\n        nonce_file.write(token_meta_nonce)\n\n\ndef auth_ec2(vault_client, pkcs7=None, nonce=None, role=None, mount_point='aws', store_nonce=True):\n    \"\"\"\n    Helper method to authenticate to vault using the \"auth_ec2\" backend.\n    :param vault_client: vaultx.Client\n    :param pkcs7: pkcs7-encoded identity document from the EC2 metadata service\n    :param nonce: string, the nonce returned from the initial AWS EC2 auth request (if applicable)\n    :param role: string, the role/policy to request. Defaults to the current instance's AMI ID if not provided.\n    :param mount_point: string, the path underwhich the AWS EC2 auth backend is provided\n    :param store_nonce: bool, if True, store the nonce received in the auth_ec2 response on disk for later use.\n        Especially useful for automated secure introduction.\n    :param kwargs: dict, remaining arguments blindly passed through by this lookup module class\n    :return: None\n    \"\"\"\n    if pkcs7 is None:\n        logger.debug('No pkcs7 argument provided to auth_ec2 backend.')\n        logger.debug('Attempting to retrieve information from EC2 metadata service.')\n        pkcs7 = load_aws_ec2_pkcs7_string()\n\n    if nonce is None:\n        logger.debug('No nonce argument provided to auth_ec2 backend.')\n        logger.debug('Attempting to retrieve information from disk.')\n        nonce = load_aws_ec2_nonce_from_disk()\n\n    auth_ec2_resp = vault_client.auth.aws.ec2_login(\n        pkcs7=pkcs7,\n        nonce=nonce,\n        role=role,\n        use_token=False,\n        mount_point=mount_point\n    )\n\n    if store_nonce and 'metadata' in auth_ec2_resp.get('auth', dict()):\n        token_meta_nonce = auth_ec2_resp['auth']['metadata'].get('nonce')\n        if token_meta_nonce is not None:\n            logger.debug(f'token_meta_nonce received back from auth_ec2 call: {token_meta_nonce}')\n            write_aws_ec2_nonce_to_disk(token_meta_nonce)\n        else:\n            logger.warning('No token meta nonce returned in auth response.')\n\n    return auth_ec2_resp\n\n\ndef get_vault_client(vault_url=VAULT_URL, certs=VAULT_CERTS, verify_certs=True, ec2_role=None):\n    \"\"\"\n    Instantiates a vaultx / vault client.\n    :param vault_url: string, protocol + address + port for the vault service\n    :param certs: tuple, Optional tuple of self-signed certs to use for verification with vaultx's requests\n    :param verify_certs: bool, if True use the provided certs tuple for verification with vaultx's requests.\n        If False, don't verify SSL with vaultx's requests (typically used with local development).\n    :param ec2_role: str, Name of the Vault AWS auth backend role to use when retrieving a token (if applicable)\n    :return: vaultx.Client\n    \"\"\"\n    logger.debug('Retrieving a vault (vaultx) client...')\n    if verify_certs:\n        # We use a self-signed certificate for the vault service itself, so we need to include our\n        # local ca bundle here for the underlying httpx module.\n        os.environ['REQUESTS_CA_BUNDLE'] = '/etc/ssl/certs/ca-certificates.crt'\n        vault_client = vaultx.Client(\n            url=vault_url,\n            cert=certs,\n        )\n    else:\n        vault_client = vaultx.Client(\n            url=vault_url,\n            verify=False,\n        )\n\n    vault_client.token = load_vault_token(vault_client, ec2_role=ec2_role)\n\n    if not vault_client.is_authenticated():\n        raise vaultx.exceptions.VaultxError('Unable to authenticate to the Vault service')\n\n    return vault_client\n\n\nauthenticated_vault_client = get_vault_client()\n</code></pre>"},{"location":"usage/auth_methods/azure/","title":"Azure","text":"<p>Note: Every method under the Client class's azure attribute includes a mount_point parameter that can be used to address the Azure auth method under a custom mount path. E.g., If enabling the Azure auth method using Vault\u2019s CLI commands via vault auth enable -path=my-azure azure\u201d, the mount_point parameter in vaultx.api.auth_methods.Azure() methods would be set to \u201cmy-azure\u201d.</p>"},{"location":"usage/auth_methods/azure/#enabling-the-auth-method","title":"Enabling the Auth Method","text":"<p><code>vaultx.api.SystemBackend.enable_auth_method()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nazure_auth_path = 'company-azure'\ndescription = 'Auth method for use by team members in our company'\n\nif f\"{azure_auth_path}/\" not in client.sys.list_auth_methods()['data']:\n    print(f'Enabling the azure auth backend at mount_point: {azure_auth_path}'\n    client.sys.enable_auth_method(\n        method_type='azure',\n        description=description,\n        path=azure_auth_path,\n    )\n</code></pre>"},{"location":"usage/auth_methods/azure/#configure","title":"Configure","text":"<p><code>vaultx.api.auth_methods.Azure.configure()</code></p> <pre><code>import os\nimport vaultx\nclient = vaultx.Client()\n\nclient.auth.azure.configure(\n    tenant_id='my-tenant-id', \n    resource='my-resource',\n    client_id=os.environ.get('AZURE_CLIENT_ID'),\n    client_secret=os.environ.get('AZURE_CLIENT_SECRET'),\n)\n</code></pre>"},{"location":"usage/auth_methods/azure/#read-config","title":"Read Config","text":"<pre><code>vaultx.api.auth_methods.Azure.read_config()\n\nimport vaultx\nclient = vaultx.Client()\n\nread_config = client.auth.azure.read_config()\nprint(f'The configured tenant_id is: {read_config['tenant_id']}')\n</code></pre>"},{"location":"usage/auth_methods/azure/#delete-config","title":"Delete Config","text":"<p><code>vaultx.api.auth_methods.Azure.delete_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.azure.delete_config()\n</code></pre>"},{"location":"usage/auth_methods/azure/#create-a-role","title":"Create a Role","text":"<p><code>vaultx.api.auth_methods.Azure.create_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.azure.create_role(\n    name='my-role',\n    policies=policies,\n    bound_service_principal_ids=bound_service_principal_ids,\n)\n</code></pre>"},{"location":"usage/auth_methods/azure/#read-a-role","title":"Read A Role","text":"<p><code>vaultx.api.auth_methods.Azure.read_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nrole_name = 'my-role'\nread_role_response = client.auth.azure.read_role(\n    name=role_name,\n)\nprint('Policies for role \"{name}\": {policies}'.format(\n    name='my-role',\n    policies=','.join(read_role_response['policies']),\n))\n</code></pre>"},{"location":"usage/auth_methods/azure/#list-roles","title":"List Roles","text":"<p><code>vaultx.api.auth_methods.Azure.list_roles()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nroles = client.auth.azure.list_roles()\nprint('The following Azure auth roles are configured: {roles}'.format(\n    roles=','.join(roles['keys']),\n))\n</code></pre>"},{"location":"usage/auth_methods/azure/#delete-a-role","title":"Delete A Role","text":"<p><code>vaultx.api.auth_methods.Azure.delete_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.azure.delete_role(\n    name='my-role',\n)\n</code></pre>"},{"location":"usage/auth_methods/azure/#login","title":"Login","text":"<p><code>vaultx.api.auth_methods.Azure.login()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.azure.login(\n    role=role_name,\n    jwt='Some MST JWT...',\n)\n</code></pre>"},{"location":"usage/auth_methods/gcp/","title":"GCP","text":"<p>Note: Every method under the Client class's gcp.auth attribute includes a mount_point parameter that can be used to address the GCP auth method under a custom mount path. E.g., If enabling the GCP auth method using Vault\u2019s CLI commands via vault auth enable -path=my-gcp gcp\u201d, the mount_point parameter in vaultx.api.auth.Gcp() methods would be set to \u201cmy-gcp\u201d.</p>"},{"location":"usage/auth_methods/gcp/#enabling-the-auth-method","title":"Enabling the Auth Method","text":"<p><code>vaultx.api.SystemBackend.enable_auth_method()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ngcp_auth_path = 'company-gcp'\ndescription = 'Auth method for use by team members in our company'\n\nif f\"{gcp_auth_path}/\" not in vault_client.sys.list_auth_methods()['data']:\n    print(f'Enabling the gcp auth backend at mount_point: {gcp_auth_path}')\n    client.sys.enable_auth_method(\n        method_type='gcp',\n        description=description,\n        path=gcp_auth_path,\n    )\n</code></pre>"},{"location":"usage/auth_methods/gcp/#configure","title":"Configure","text":"<p><code>vaultx.api.auth.Gcp.configure()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.gcp.configure(\n    credentials='some signed JSON web token for the Vault server...'\n)\n</code></pre>"},{"location":"usage/auth_methods/gcp/#read-config","title":"Read Config","text":"<p><code>vaultx.api.auth.Gcp.read_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_config = client.auth.gcp.read_config()\nprint('The configured project_id is: {id}'.format(id=read_config['project_id'))\n</code></pre>"},{"location":"usage/auth_methods/gcp/#delete-config","title":"Delete Config","text":"<p><code>vaultx.api.auth.Gcp.delete_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.gcp.delete_config()\n</code></pre>"},{"location":"usage/auth_methods/gcp/#create-role","title":"Create Role","text":"<p><code>vaultx.api.auth.Gcp.create_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.gcp.create_role(\n        name='some-gcp-role-name',\n        role_type='iam',\n        project_id='some-gcp-project-id',\n        bound_service_accounts=['*'],\n)\n</code></pre>"},{"location":"usage/auth_methods/gcp/#edit-service-accounts-on-iam-role","title":"Edit Service Accounts On IAM Role","text":"<p><code>vaultx.api.auth.Gcp.edit_service_accounts_on_iam_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.gcp.edit_service_accounts_on_iam_role(\n            name='some-gcp-role-name',\n    add=['vaultx@appspot.gserviceaccount.com'],\n)\n\nclient.gcp.edit_service_accounts_on_iam_role(\n            name='some-gcp-role-name',\n    remove=['disallowed-service-account@appspot.gserviceaccount.com'],\n)\n</code></pre>"},{"location":"usage/auth_methods/gcp/#edit-labels-on-gce-role","title":"Edit Labels On GCE Role","text":"<p><code>vaultx.api.auth.Gcp.edit_labels_on_gce_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.gcp.edit_labels_on_gce_role(\n            name='some-gcp-role-name',\n    add=['some-key:some-value'],\n)\n\nclient.gcp.edit_labels_on_gce_role(\n            name='some-gcp-role-name',\n    remove=['some-bad-key:some-bad-value'],\n)\n</code></pre>"},{"location":"usage/auth_methods/gcp/#read-a-role","title":"Read A Role","text":"<p><code>vaultx.api.auth.Gcp.read_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_role_response = client.gcp.read_role(\n    name=role_name,\n)\n\nprint('Policies for role \"{name}\": {policies}'.format(\n    name='my-role',\n    policies=','.join(read_role_response['policies']),\n))\n</code></pre>"},{"location":"usage/auth_methods/gcp/#list-roles","title":"List Roles","text":"<p><code>vaultx.api.auth.Gcp.list_roles()</code> <pre><code>import vaultx\nclient = vaultx.Client()\n\nroles = client.auth.gcp.list_roles()\nprint('The following GCP auth roles are configured: {roles}'.format(\n    roles=','.join(roles['keys']),\n))\n</code></pre></p>"},{"location":"usage/auth_methods/gcp/#delete-a-role","title":"Delete A Role","text":"<p><code>vaultx.api.auth.Gcp.delete_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.gcp.delete_role(\n)\n</code></pre>"},{"location":"usage/auth_methods/gcp/#login","title":"Login","text":"<p><code>vaultx.api.auth.Gcp.login()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.gcp.login(\n    role=role_name,\n    jwt='some signed JSON web token...',\n)\nprint(client.is_authenticated)\n</code></pre>"},{"location":"usage/auth_methods/gcp/#example-with-google-api-python-client-usage","title":"Example with google-api-python-client Usage","text":"<pre><code>import time\n\nimport googleapiclient.discovery # pip install google-api-python-client\nfrom google.oauth2 import service_account # pip install google-auth\nimport vaultx # pip install vaultx\n\n# First load some previously generated GCP service account key\npath_to_sa_json = 'some-service-account-path.json'\ncredentials = service_account.Credentials.from_service_account_file(path_to_sa_json)\nwith open(path_to_sa_json, 'r') as f:\n    creds = json.load(f)\n    project = creds['project_id']\n    service_account = creds['client_email']\n\n# Generate a payload for subsequent \"signJwt()\" call\n# Reference: https://google-auth.readthedocs.io/en/latest/reference/google.auth.jwt.html#google.auth.jwt.Credentials\nnow = int(time.time())\nexpires = now + 900  # 15 mins in seconds, can't be longer.\npayload = {\n    'iat': now,\n    'exp': expires,\n    'sub': service_account,\n    'aud': 'vault/my-role'\n}\nbody = {'payload': json.dumps(payload)}\nname = f'projects/{project}/serviceAccounts/{service_account}'\n\n# Perform the GCP API call\niam = googleapiclient.discovery.build('iam', 'v1', credentials=credentials)\nrequest = iam.projects().serviceAccounts().signJwt(name=name, body=body)\nresp = request.execute()\njwt = resp['signedJwt']\n\n# Perform vaultx call to configured GCP auth method\nclient.auth.gcp.login(\n    role='my-role',\n    jwt=jwt,\n)\n</code></pre>"},{"location":"usage/auth_methods/github/","title":"GitHub","text":"<p>Note: Every method under the Client class's github attribute includes a mount_point parameter that can be used to address the Github auth method under a custom mount path. E.g., If enabling the Github auth method using Vault\u2019s CLI commands via vault auth enable -path=my-github github\u201d, the mount_point parameter in vaultx.api.auth_methods.Github() methods would be set to \u201cmy-github\u201d.</p>"},{"location":"usage/auth_methods/github/#enabling-the-auth-method","title":"Enabling the Auth Method","text":"<p><code>vaultx.api.SystemBackend.enable_auth_method()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ngithub_auth_path = 'company-github'\ndescription = 'Auth method for use by team members in our company'\n\nif f\"{github_auth_path}/\" not in client.sys.list_auth_methods()['data']:\n    print(f'Enabling the github auth backend at mount_point: {github_auth_path}')\n    client.sys.enable_auth_method(\n        method_type='github',\n        description=description,\n        path=github_auth_path,\n    )\n</code></pre>"},{"location":"usage/auth_methods/github/#configure-connection-parameters","title":"Configure Connection Parameters","text":"<p><code>vaultx.api.auth_methods.Github.configure()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.github.configure(\n    organization='our-lovely-company',\n    max_ttl='48h',  # i.e., A given token can only be renewed for up to 48 hours\n)\n</code></pre>"},{"location":"usage/auth_methods/github/#reading-configuration","title":"Reading Configuration","text":"<p><code>vaultx.api.auth_methods.Github.read_configuration()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ngithub_config = client.auth.github.read_configuration()\nprint(f'The Github auth method is configured with a ttl of: {github_config['data']['ttl']}')\n</code></pre>"},{"location":"usage/auth_methods/github/#mapping-teams-to-policies","title":"Mapping Teams to Policies","text":"<p><code>vaultx.api.auth_methods.Github.map_team()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nteams = [\n    dict(name='some-dev-team', policies=['dev-team']),\n    dict(name='admin-team', policies=['administrator']),\n]\nfor team in teams:\n    client.auth.github.map_team(\n        team_name=team['name'],\n        policies=team['policies'],\n    )\n</code></pre>"},{"location":"usage/auth_methods/github/#reading-team-mappings","title":"Reading Team Mappings","text":"<p><code>vaultx.api.auth_methods.Github.read_team_mapping()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nteam_name = 'my-super-cool-team'\ngithub_config = client.auth.github.read_team_mapping(\n    team_name=team_name,\n)\nprint(f'The Github team {team_name} is mapped to the following policies: {github_config['data']['value']}')\n</code></pre>"},{"location":"usage/auth_methods/github/#mapping-users-to-policies","title":"Mapping Users to Policies","text":"<p><code>vaultx.api.auth_methods.Github.map_user()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nusers = [\n    dict(name='some-dev-user', policies=['dev-team']),\n    dict(name='some-admin-user', policies=['administrator']),\n]\nfor user in users:\n    client.auth.github.map_user(\n        user_name=user['name'],\n        policies=user['policies'],\n    )\n</code></pre>"},{"location":"usage/auth_methods/github/#reading-user-mappings","title":"Reading User Mappings","text":"<p><code>vaultx.api.auth_methods.Github.read_user_mapping()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nuser_name = 'some-dev-user'\ngithub_config = client.auth.github.read_user_mapping(\n    user_name=user_name,\n)\nprint('The Github user \"{user}\" is mapped to the following policies: {policies}'.format(\n    user=user_name,\n    policies=github_config['data']['value'],\n))\n</code></pre>"},{"location":"usage/auth_methods/github/#authentication-login","title":"Authentication / Login","text":"<p><code>vaultx.api.auth_methods.Github.login()</code></p> <p>Log in and automatically update the underlying \u201ctoken\u201d attribute on the vaultx.adapters.Adapter() instance:</p> <pre><code>import vaultx\nclient = vaultx.Client()\nlogin_response = client.auth.github.login(token='some personal github token')\n</code></pre>"},{"location":"usage/auth_methods/jwt_oidc/","title":"JWT/OIDC","text":"<p>Note: The vaultx.api.auth_methods.Jwt and vaultx.api.auth_methods.Oidc share all the same methods. They only differ in the default path their methods will use. I.e., v1/auth/jwt versus v1/auth/oidc.</p>"},{"location":"usage/auth_methods/jwt_oidc/#enabling","title":"Enabling","text":"<pre><code>import vaultx\nclient = vaultx.Client()\n\n# For JWT\nclient.sys.enable_auth_method(\n    method_type='jwt',\n)\n\n# For OIDC\nclient.sys.enable_auth_method(\n    method_type='oidc',\n)\n</code></pre>"},{"location":"usage/auth_methods/jwt_oidc/#configure","title":"Configure","text":"<p><code>vaultx.api.auth_methods.Jwt.configure()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.jwt.configure(\n    oidc_discovery_url=oidc_discovery_url,\n    oidc_discovery_ca_pem=some_ca_file_contents,\n)\n\n# or\n\nclient.auth.oidc.configure(\n    oidc_discovery_url=oidc_discovery_url,\n    oidc_discovery_ca_pem=some_ca_file_contents,\n)\n</code></pre>"},{"location":"usage/auth_methods/jwt_oidc/#read-config","title":"Read Config","text":"<p><code>vaultx.api.auth_methods.Jwt.read_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_response = client.auth.jwt.read_config()\n# or\nread_response = client.auth.oidc.read_config()\n\ndiscovery_url = read_response['data']['oidc_discovery_url']\nprint(f'Current OIDC discovery URL is set to: {discovery_url}')\n</code></pre>"},{"location":"usage/auth_methods/jwt_oidc/#create-role","title":"Create Role","text":"<p><code>vaultx.api.auth_methods.Jwt.create_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nrole_name = 'vaultx'\nallowed_redirect_uris = ['https://localhost:8200/jwt-test/callback']\nuser_claim = 'https://vault/user'\n\n# JWT\nclient.auth.jwt.create_role(\n    name=role_name,\n    role_type='jwt',\n    allowed_redirect_uris=allowed_redirect_uris,\n    user_claim='sub',\n    bound_audiences=['12345'],\n)\n\n# OIDC\nclient.auth.oidc.create_role(\n    name=role_name,\n    allowed_redirect_uris=allowed_redirect_uris,\n    user_claim=user_claim,\n)\n</code></pre>"},{"location":"usage/auth_methods/jwt_oidc/#read-role","title":"Read Role","text":"<p><code>vaultx.api.auth_methods.Jwt.read_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nresponse = client.auth.jwt.read_role(\n    name='vaultx',\n)\nprint(f'vaultx role has a user_claim setting of: {response['data']['user_claim']}')\n</code></pre>"},{"location":"usage/auth_methods/jwt_oidc/#list-roles","title":"List Roles","text":"<p><code>vaultx.api.auth_methods.Jwt.list_roles()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_resp = client.auth.jwt.list_roles()\nprint(f'Configured roles: {\", \".join(list_resp['data']['keys'])}')\n</code></pre>"},{"location":"usage/auth_methods/jwt_oidc/#delete-role","title":"Delete Role","text":"<p><code>vaultx.api.auth_methods.Jwt.delete_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.jwt.delete_role(\n    name='vaultx',\n)\n</code></pre>"},{"location":"usage/auth_methods/jwt_oidc/#oidc-authorization-url-request","title":"OIDC Authorization URL Request","text":"<p><code>vaultx.api.auth_methods.Jwt.oidc_authorization_url_request()</code></p> <p>This is equivalent to vault login -method=oidc</p> <pre><code>import webbrowser\nimport http.server\nimport vaultx\nimport urllib.parse\n\n# CHANGEME: these params might have to be changed to match your Vault configuration.\n# Specifically\n# 1. auth/oidc/role/XXX allowed_redirect_uris must contain the\n#    OIDC_REDIRECT_URI string used below.\n# 2. Role must match your environment's role for this client.\nOIDC_CALLBACK_PORT = 8250\nOIDC_REDIRECT_URI = f'http://localhost:{OIDC_CALLBACK_PORT}/oidc/callback'\nROLE = 'vaultx' # Use None (not empty string) for the default Role\nSELF_CLOSING_PAGE = '''\n&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\n// Closes IE, Edge, Chrome, Brave\nwindow.onload = function load() {\n  window.open('', '_self', '');\n  window.close();\n};\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Authentication successful, you can close the browser now.&lt;/p&gt;\n  &lt;script&gt;\n    // Needed for Firefox security\n    setTimeout(function() {\n          window.close()\n    }, 5000);\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n'''\n\ndef main():\n    client = vaultx.Client()\n\n    auth_url_response = client.auth.oidc.oidc_authorization_url_request(\n        role=ROLE,\n        redirect_uri=OIDC_REDIRECT_URI,\n    )\n    auth_url = auth_url_response['data']['auth_url']\n    if auth_url == '':\n        return None # TODO: throw a nicer error\n\n    params = urllib.parse.parse_qs(auth_url.split('?')[1])\n    auth_url_nonce = params['nonce'][0]\n    auth_url_state = params['state'][0]\n\n    webbrowser.open(auth_url)\n    token = login_oidc_get_token()\n\n    auth_result = client.auth.oidc.oidc_callback(\n        code=token,\n        path='oidc',\n        nonce=auth_url_nonce,\n        state=auth_url_state,\n    )\n    new_token = auth_result['auth']['client_token']\n    print(f'Client token returned: {new_token}')\n\n    # If you want to continue using the client here\n    # update the client to use the new token\n    client.token = new_token\n    return client\n\n# handles the callback\ndef login_oidc_get_token():\n    from http.server import BaseHTTPRequestHandler, HTTPServer\n\n    class HttpServ(HTTPServer):\n        def __init__(self, *args, **kwargs):\n            HTTPServer.__init__(self, *args, **kwargs)\n            self.token = None\n\n    class AuthHandler(BaseHTTPRequestHandler):\n        token = ''\n\n        def do_GET(self):\n            params = urllib.parse.parse_qs(self.path.split('?')[1])\n            self.server.token = params['code'][0]\n            self.send_response(200)\n            self.end_headers()\n            self.wfile.write(str.encode(SELF_CLOSING_PAGE))\n\n    server_address = ('', OIDC_CALLBACK_PORT)\n    httpd = HttpServ(server_address, AuthHandler)\n    httpd.handle_request()\n    return httpd.token\n\nif __name__ == '__main__':\n    client = main()\n    if client and client.is_authenticated():\n        # Do something\n        pass\n</code></pre>"},{"location":"usage/auth_methods/jwt_oidc/#jwt-login","title":"JWT Login","text":"<p><code>vaultx.api.auth_methods.Jwt.jwt_login()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nresponse = client.auth.jwt.jwt_login(\n    role=role_name,\n    jwt=generate_token_response['data']['token'],\n)\nprint(f'Client token returned: {response['auth']['client_token']}')\n</code></pre>"},{"location":"usage/auth_methods/kubernetes/","title":"Kubernetes","text":""},{"location":"usage/auth_methods/kubernetes/#authentication","title":"Authentication","text":"<pre><code>from vaultx import Client\nfrom vaultx.api.auth_methods import Kubernetes\n\nclient = Client(url=url, verify=certificate_path)\n\n# Kubernetes (from k8s pod)\nf = open('/var/run/secrets/kubernetes.io/serviceaccount/token')\njwt = f.read()\nKubernetes(client.adapter).login(role=role, jwt=jwt)\n</code></pre>"},{"location":"usage/auth_methods/ldap/","title":"LDAP","text":"<p>Note: Every method under the Client class's ldap attribute includes a mount_point parameter that can be used to address the LDAP auth method under a custom mount path. E.g., If enabling the LDAP auth method using Vault\u2019s CLI commands via vault auth enable -path=my-ldap ldap\u201d, the mount_point parameter in vaultx.api.auth_methods.Ldap() methods would be set to \u201cmy-ldap\u201d.</p>"},{"location":"usage/auth_methods/ldap/#enabling-the-ldap-auth-method","title":"Enabling the LDAP Auth Method","text":"<p><code>vaultx.api.SystemBackend.enable_auth_method()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nldap_auth_path = 'company-ldap'\ndescription = \"Auth method for use by team members in our company's LDAP organization\"\n\nif f'{ldap_auth_path}/' not in client.sys.list_auth_methods()['data']:\n    print(f'Enabling the ldap auth backend at mount_point: {ldap_auth_path}')\n    client.sys.enable_auth_method(\n        method_type='ldap',\n        description=description,\n        path=ldap_auth_path,\n    )\n</code></pre>"},{"location":"usage/auth_methods/ldap/#configure-ldap-auth-method-settings","title":"Configure LDAP Auth Method Settings","text":"<p><code>vaultx.api.auth_methods.Ldap.configure()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.ldap.configure(\n    user_dn='dc=users,dc=vaultx,dc=network',\n    group_dn='ou=groups,dc=vaultx,dc=network',\n    url='ldaps://ldap.vaultx.network:12345',\n    bind_dn='cn=admin,dc=vaultx,dc=network',\n    bind_pass='ourverygoodadminpassword',\n    user_attr='uid',\n    group_attr='cn',\n)\n</code></pre>"},{"location":"usage/auth_methods/ldap/#reading-the-ldap-auth-method-configuration","title":"Reading the LDAP Auth Method Configuration","text":"<p><code>vaultx.api.auth_methods.Ldap.read_configuration()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nldap_configuration = client.auth.ldap.read_configuration()\nprint(f'The LDAP auth method is configured with a LDAP server URL of: {ldap_configuration['data']['url']}')\n</code></pre>"},{"location":"usage/auth_methods/ldap/#create-or-update-an-ldap-group-mapping","title":"Create or Update an LDAP Group Mapping","text":"<p><code>vaultx.api.auth_methods.Ldap.create_or_update_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.ldap.create_or_update_group(\n    name='some-dudes',\n    policies=['policy-for-some-dudes'],\n)\n</code></pre>"},{"location":"usage/auth_methods/ldap/#list-ldap-group-mappings","title":"List LDAP Group Mappings","text":"<p><code>vaultx.api.auth_methods.Ldap.list_groups()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nldap_groups = client.auth.ldap.list_groups()\nprint(f'The following groups are configured in the LDAP auth method: {\",\".join(ldap_groups['data']['keys'])}')\n</code></pre>"},{"location":"usage/auth_methods/ldap/#read-ldap-group-mapping","title":"Read LDAP Group Mapping","text":"<p><code>vaultx.api.auth_methods.Ldap.read_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nsome_dudes_ldap_group = client.auth.ldap.read_group(\n    name='somedudes',\n)\nprint('The \"somedudes\" group in the LDAP auth method are mapped to the following policies: {policies}'.format(\n    policies=','.join(some_dudes_ldap_group['data']['policies'])\n))\n</code></pre>"},{"location":"usage/auth_methods/ldap/#deleting-a-ldap-group-mapping","title":"Deleting a LDAP Group Mapping","text":"<p><code>vaultx.api.auth_methods.Ldap.delete_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.ldap.delete_group(\n    name='some-group',\n)\n</code></pre>"},{"location":"usage/auth_methods/ldap/#creating-or-updating-a-ldap-user-mapping","title":"Creating or Updating a LDAP User Mapping","text":"<p><code>vaultx.api.auth_methods.Ldap.create_or_update_user()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.ldap.create_or_update_user(\n    username='somedude',\n    policies=['policy-for-some-dudes'],\n)\n</code></pre>"},{"location":"usage/auth_methods/ldap/#listing-ldap-user-mappings","title":"Listing LDAP User Mappings","text":"<p><code>vaultx.api.auth_methods.Ldap.list_users()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nldap_users = client.auth.ldap.list_users()\nprint('The following users are configured in the LDAP auth method: {users}'.format(\n    users=','.join(ldap_users['data']['keys'])\n)\n</code></pre>"},{"location":"usage/auth_methods/ldap/#reading-a-ldap-user-mapping","title":"Reading a LDAP User Mapping","text":"<p><code>vaultx.api.auth_methods.Ldap.read_user()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nsome_dude_ldap_user = client.auth.ldap.read_user(\n    username='somedude'\n)\nprint('The \"somedude\" user in the LDAP auth method is mapped to the following policies: {policies}'.format(\n    policies=','.join(some_dude_ldap_user['data']['policies'])\n)\n</code></pre>"},{"location":"usage/auth_methods/ldap/#deleting-a-configured-user-mapping","title":"Deleting a Configured User Mapping","text":"<p><code>vaultx.api.auth_methods.Ldap.delete_user()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.ldap.delete_user(\n    username='somedude',\n)\n</code></pre>"},{"location":"usage/auth_methods/ldap/#authentication-login","title":"Authentication / Login","text":"<p><code>vaultx.api.auth_methods.Ldap.login_with_user()</code></p> <p>For an LDAP backend mounted under a non-default (ldap) path. E.g., via Vault CLI with vault auth enable -path=prod-ldap ldap</p> <pre><code>from getpass import getpass\n\nimport vaultx\n\nservice_account_username = 'someuser'\npassword_prompt = 'Please enter your password for the LDAP authentication backend: '\nservice_account_password = getpass(prompt=password_prompt)\n\nclient = vaultx.Client()\n\n# Here the mount_point parameter corresponds to the path provided when enabling the backend\nclient.auth.ldap.login(\n    username=service_account_username,\n    password=service_account_password,\n    mount_point='prod-ldap'\n)\nprint(client.is_authenticated())  # =&gt; True\n</code></pre>"},{"location":"usage/auth_methods/legacy_mfa/","title":"Legacy MFA","text":""},{"location":"usage/auth_methods/legacy_mfa/#configure-legacy-mfa-auth-method-settings","title":"Configure Legacy MFA Auth Method Settings","text":"<p><code>vaultx.api.auth_methods.LegacyMfa.configure()</code></p> <p>Note: The legacy/unsupported MFA auth method covered by this class\u2019s configuration API route only supports integration with a subset of Vault auth methods. See the list of supported auth methods in this module\u2019s \"SUPPORTED_AUTH_METHODS\" attribute and/or the associated Vault LegacyMFA documentation for additional information.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nuserpass_auth_path = 'some-userpass'\n\nif f'{userpass_auth_path}/' not in client.sys.list_auth_methods()['data']:\n    print(f'Enabling the userpass auth backend at mount_point: {userpass_auth_path}')\n    client.sys.enable_auth_method(\n        method_type='userpass',\n        path=userpass_auth_path,\n    )\n\nclient.auth.legacymfa.configure(\n    mount_point=userpass_auth_path,\n)\n</code></pre>"},{"location":"usage/auth_methods/legacy_mfa/#reading-the-legacy-mfa-auth-method-configuration","title":"Reading the Legacy MFA Auth Method Configuration","text":"<p><code>vaultx.api.auth_methods.LegacyMfa.read_configuration()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nmfa_configuration = client.auth.legacymfa.read_configuration()\nprint('The LegacyMFA auth method is configured with a MFA type of: {mfa_type}'.format(\n    mfa_type=mfa_configuration['data']['type']\n)\n</code></pre>"},{"location":"usage/auth_methods/legacy_mfa/#configure-duo-legacymfa-type-access-credentials","title":"Configure Duo LegacyMFA Type Access Credentials","text":"<p><code>vaultx.api.auth_methods.LegacyMfa.configure_duo_access()</code></p> <pre><code>from getpass import getpass\n\nimport vaultx\nclient = vaultx.Client()\n\nsecret_key_prompt = 'Please enter the Duo access secret key to configure: '\nduo_access_secret_key = getpass(prompt=secret_key_prompt)\n\nclient.auth.legacymfa.configure_duo_access(\n    mount_point=userpass_auth_path,\n    host='api-1234abcd.duosecurity.com',\n    integration_key='SOME_DUO_IKEY',\n    secret_key=duo_access_secret_key,\n)\n</code></pre>"},{"location":"usage/auth_methods/legacy_mfa/#configure-duo-legacy-mfa-type-behavior","title":"Configure Duo Legacy MFA Type Behavior","text":"<p><code>vaultx.api.auth_methods.LegacyMfa.configure_duo_behavior()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.legacymfa.configure_duo_behavior(\n    mount_point=userpass_auth_path,\n    username_format='%s@vaultx.network',\n)\n</code></pre>"},{"location":"usage/auth_methods/legacy_mfa/#read-duo-legacy-mfa-type-behavior","title":"Read Duo Legacy MFA Type Behavior","text":"<p><code>vaultx.api.auth_methods.LegacyMfa.read_duo_behavior_configuration()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nduo_behavior_config = client.auth.legacymfa.read_duo_behavior_configuration(\n    mount_point=userpass_auth_path,\n)\nprint('The Duo LegacyMFA behavior is configured with a username_format of: {username_format}'.format(\n    username_format=duo_behavior_config['data']['username_format'],\n))\n</code></pre>"},{"location":"usage/auth_methods/legacy_mfa/#authentication-login","title":"Authentication / Login","text":"<pre><code>from getpass import getpass\n\nimport vaultx\n\nlogin_username = 'someuser'\npassword_prompt = 'Please enter your password for the userpass (with MFA) authentication backend: '\nlogin_password = getpass(prompt=password_prompt)\npasscode_prompt = 'Please enter your OTP for the userpass (with MFA) authentication backend: '\nuserpass_mfa_passcode = getpass(prompt=passcode_prompt)\n\nclient = vaultx.Client()\n\n# Here the mount_point parameter corresponds to the path provided when enabling the backend\nclient.auth.legacymfa.auth_userpass(\n    username=login_username,\n    password=login_password,\n    mount_point=userpass_auth_path,\n    passcode=userpass_mfa_passcode,\n)\nprint(client.is_authenticated)  # =&gt; True\n</code></pre>"},{"location":"usage/auth_methods/okta/","title":"Okta","text":"<p>Note: Every method under the Client class's okta attribute includes a mount_point parameter that can be used to address the Okta auth method under a custom mount path. E.g., If enabling the Okta auth method using Vault\u2019s CLI commands via vault secret enable -path=my-okta okta\u201d, the mount_point parameter in Source reference: vaultx.api.auth_methods.Okta() methods would be set to \u201cmy-okta\u201d.</p>"},{"location":"usage/auth_methods/okta/#enabling-the-auth-method","title":"Enabling the Auth Method","text":"<p><code>vaultx.v1.client.sys.enable_secrets_engine()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nokta_path = 'company-okta'\ndescription = 'Auth method for use by team members in our company'\n\nif f\"{okta_path}\" not in client.sys.list_auth_methods()['data']:\n    print(f'Enabling the okta secret backend at mount_point: {okta_secret_path}')\n    client.sys.enable_auth_method(\n        method_type='okta',\n        description=description,\n        path=okta_secret_path,\n    )\n</code></pre>"},{"location":"usage/auth_methods/okta/#configure","title":"Configure","text":"<p><code>vaultx.api.auth_methods.Okta.configure()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.okta.configure(\n    org_name='vaultx-project'\n)\n</code></pre>"},{"location":"usage/auth_methods/okta/#read-config","title":"Read Config","text":"<p><code>vaultx.api.auth_methods.Okta.read_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nokta_config = client.auth.okta.read_config()\nprint('The Okta auth method at path /okta has a configured organization name of: {name}'.format(\n    name=okta_config['data']['org_name'],\n))\n</code></pre>"},{"location":"usage/auth_methods/okta/#list-users","title":"List Users","text":"<p><code>vaultx.api.auth_methods.Okta.list_users()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nusers = client.auth.okta.list_users()\nprint(f'The following Okta users are registered: {\",\".join(users['data']['keys'])}')\n</code></pre>"},{"location":"usage/auth_methods/okta/#register-user","title":"Register User","text":"<p><code>vaultx.api.auth_methods.Okta.register_user()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.okta.register_user(\n    username='vaultx-person',\n    policies=['vaultx-admin'],\n)\n</code></pre>"},{"location":"usage/auth_methods/okta/#read-user","title":"Read User","text":"<p><code>vaultx.api.auth_methods.Okta.read_user()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_user = client.auth.okta.read_user(\n    username='vaultx-person',\n)\nprint('Okta user \"{name}\" has the following attached policies: {policies}'.format(\n    name='vaultx-person',\n    policies=', '.join(read_user['data']['policies']),\n))\n</code></pre>"},{"location":"usage/auth_methods/okta/#delete-user","title":"Delete User","text":"<p><code>vaultx.api.auth_methods.Okta.delete_user()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.okta.delete_user(\n    username='vaultx-person'\n)\n</code></pre>"},{"location":"usage/auth_methods/okta/#list-groups","title":"List Groups","text":"<p><code>vaultx.api.auth_methods.Okta.list_groups()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ngroups = client.auth.okta.list_groups()\nprint('The following Okta groups are registered: {groups}'.format(\n    groups=','.join(groups['data']['keys']),\n))\n</code></pre>"},{"location":"usage/auth_methods/okta/#register-group","title":"Register Group","text":"<p><code>vaultx.api.auth_methods.Okta.register_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.okta.register_group(\n    name='vaultx-group',\n    policies=['vaultx-group-members'],\n)\n</code></pre>"},{"location":"usage/auth_methods/okta/#read-group","title":"Read Group","text":"<p><code>vaultx.api.auth_methods.Okta.read_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_group = client.auth.okta.read_group(\n    name='vaultx-group',\n)\nprint('Okta group \"{name}\" has the following attached policies: {policies}'.format(\n    name='vaultx-group',\n    policies=', '.join(read_group['data']['policies']),\n))\n</code></pre>"},{"location":"usage/auth_methods/okta/#delete-group","title":"Delete Group","text":"<p><code>vaultx.api.auth_methods.Okta.delete_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.auth.okta.delete_group(\n    name='vaultx-group',\n)\n</code></pre>"},{"location":"usage/auth_methods/okta/#login","title":"Login","text":"<p><code>vaultx.api.auth_methods.Okta.login()</code></p> <pre><code>from getpass import getpass\n\nimport vaultx\nclient = vaultx.Client()\n\n\npassword_prompt = 'Please enter your password for the Okta authentication backend: '\nokta_password = getpass(prompt=password_prompt)\n\nclient.auth.okta.login(\n    username='vaultx-person',\n    password=okta_password,\n)\n</code></pre>"},{"location":"usage/auth_methods/token/","title":"Token","text":""},{"location":"usage/auth_methods/token/#authentication","title":"Authentication","text":"<p><code>vaultx.api.auth_methods.Token.is_authenticated()</code></p> <pre><code>client.token = 'MY_TOKEN'\nassert client.is_authenticated() # =&gt; True\n</code></pre>"},{"location":"usage/auth_methods/token/#token-management","title":"Token Management","text":"<p>Token creation and revocation:</p> <p><code>vaultx.api.auth_methods.Token.create()</code> <code>vaultx.api.auth_methods.Token.revoke()</code></p> <pre><code>token = client.auth.token.create(policies=['root'], ttl='1h')\n\ncurrent_token = client.auth.token.lookup_self()\nsome_other_token = client.auth.token.lookup('xxx')\n\nclient.auth.token.revoke('xxx')\nclient.auth.token.revoke('yyy', orphan=True)\n\n# revoke current token\nclient.auth.token.revoke_self()\n# logout and revoke current token\nclient.logout(revoke_token=True)\n\nclient.auth.token.renew('aaa')\n</code></pre> <p>Lookup and revoke tokens via a token accessor:</p> <p><code>vaultx.api.auth_methods.Token.lookup()</code></p> <pre><code>token = client.auth.token.create(policies=['root'], ttl='1h')\ntoken_accessor = token['auth']['accessor']\n\nsame_token = client.auth.token.lookup(token_accessor, accessor=True)\nclient.auth.token.revoke(token_accessor, accessor=True)\n</code></pre> <p>Wrapping/unwrapping a token:</p> <p><code>vaultx.api.auth_methods.Token.unwrap()</code></p> <pre><code>wrap = client.auth.token.create(policies=['root'], ttl='1h', wrap_ttl='1m')\nresult = client.sys.unwrap(wrap['wrap_info']['token'])\n</code></pre> <p>Login with a wrapped token:</p> <pre><code>wrap = client.auth.token.create(policies=['root'], ttl='1h', wrap_ttl='1m')\nnew_client = hvac.Client()\nnew_client.auth_cubbyhole(wrap['wrap_info']['token'])\nassert new_client.token != wrapped_token['wrap_info']['token']\n</code></pre>"},{"location":"usage/auth_methods/userpass/","title":"Userpass","text":""},{"location":"usage/auth_methods/userpass/#authentication","title":"Authentication","text":"<p><code>vaultx.api.auth_methods.Userpass.login()</code></p> <pre><code>import hvac\nclient = hvac.Client()\n\nclient.auth.userpass.login(\n    username='&lt;some_username&gt;',\n    password='&lt;username_password&gt;',\n)\n</code></pre>"},{"location":"usage/secrets_engines/active_directory/","title":"Active Directory","text":""},{"location":"usage/secrets_engines/active_directory/#configure-ad-secrets-engine","title":"Configure AD Secrets Engine","text":"<p>Configure the AD secrets engine to either manage service accounts or service account libraries.</p> <p><code>vaultx.api.secrets_engines.ActiveDirectory.configure()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\n# Not all these settings may apply to your setup, refer to Vault\n# documentation for context of what to use here\n\nconfig_response = client.secrets.ActiveDirectory.configure(\n    binddn='username@domain.fqdn', # An upn or DN can be used for this value, Vault resolves the user to a dn silently\n    bindpass='***********',\n    url='ldaps://domain.fqdn',\n    userdn='CN=Users,DN=domain,DN=fqdn',\n    upndomain='domain.fqdn',\n    ttl=60,\n    max_ttl=120\n)\nprint(config_response)\n</code></pre>"},{"location":"usage/secrets_engines/active_directory/#read-config","title":"Read Config","text":"<p>Return the AD Secret Engine configuration.</p> <p><code>vaultx.api.secrets_engines.ActiveDirectory.read_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nconfig_response = client.secrets.ActiveDirectory.read_config()\n</code></pre>"},{"location":"usage/secrets_engines/active_directory/#create-or-update-role","title":"Create or Update Role","text":"<p>Create or Update a role which allows the retrieval and rotation of an AD account. Retrieve and rotate the actual credential via generate_credentials().</p> <p><code>vaultx.api.secrets_engines.ActiveDirectory.create_or_update_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nrole_response = client.secrets.ActiveDirectory.create_or_update_role(\n    name='sql-service-account',\n    service_account_name='svc-sqldb-petshop@domain.fqdn',\n    ttl=60)\n</code></pre>"},{"location":"usage/secrets_engines/active_directory/#read-role","title":"Read Role","text":"<p>Retrieve the role configuration which allows the retrieval and rotation of an AD account. Retrieve and rotate the actual credential via generate_credentials().</p> <p><code>vaultx.api.secrets_engines.ActiveDirectory.read_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nrole_response = client.secrets.ActiveDirectory.read_role(name='sql-service-account')\n</code></pre>"},{"location":"usage/secrets_engines/active_directory/#list-roles","title":"List Roles","text":"<p>List all configured roles which allows the retrieval and rotation of an AD account. Retrieve and rotate the actual credential via generate_credentials().</p> <p><code>vaultx.api.secrets_engines.ActiveDirectory.list_roles()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nall_roles = client.secrets.ActiveDirectory.list_roles()\n</code></pre>"},{"location":"usage/secrets_engines/active_directory/#delete-role","title":"Delete Role","text":"<p>Remove the role configuration which allows the retrieval and rotation of an AD account.</p> <p>The account is retained in Active Directory, but the password will be whatever Vault had rotated it to last. To regain control, the password will need to be reset via Active Directory.</p> <p><code>vaultx.api.secrets_engines.ActiveDirectory.delete_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\ndeletion_response = client.secrets.ActiveDirectory.delete_role(name='sql-service-account')\n</code></pre>"},{"location":"usage/secrets_engines/active_directory/#generate-credentials","title":"Generate Credentials","text":"<p>Retrieve a service account password from AD. Return the previous password (if known). Vault shall rotate the password before returning it, if it has breached its configured ttl.</p> <p><code>vaultx.api.secrets_engines.ActiveDirectory.generate_credentials()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\ngen_creds_response = client.secrets.ActiveDirectory.generate_credentials(\n    name='vaultx-role',\n)\n\naccess = gen_creds_response['data']['current_password']\nsecret = gen_creds_response['data']['old_password']\n\nprint(f'Retrieved Service Account Password: {access} (Current) / {secret} (Old)')\n</code></pre>"},{"location":"usage/secrets_engines/aws/","title":"AWS","text":""},{"location":"usage/secrets_engines/aws/#configure-root-iam-credentials","title":"Configure Root IAM Credentials","text":"<p><code>vaultx.api.secrets_engines.Aws.configure_root_iam_credentials()</code></p> <pre><code>import os\n\nimport vaultx\nclient = vaultx.Client()\n\nclient.secrets.aws.configure_root_iam_credentials(\n    access_key=os.getenv('AWS_ACCESS_KEY_ID'),\n    secret_key=os.getenv('AWS_SECRET_ACCESS_KEY'),\n)\n</code></pre>"},{"location":"usage/secrets_engines/aws/#rotate-root-iam-credentials","title":"Rotate Root IAM Credentials","text":"<p><code>vaultx.api.secrets_engines.Aws.rotate_root_iam_credentials()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.aws.rotate_root_iam_credentials()\n</code></pre>"},{"location":"usage/secrets_engines/aws/#configure-lease","title":"Configure Lease","text":"<p><code>vaultx.api.secrets_engines.Aws.configure_lease()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Set the default least TTL to 300 seconds / 5 minutes\nclient.secrets.aws.configure_lease(\n    lease='300s',\n)\n</code></pre>"},{"location":"usage/secrets_engines/aws/#read-lease","title":"Read Lease","text":"<p><code>vaultx.api.secrets_engines.Aws.read_lease()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_lease_response = client.secrets.aws.read_lease()\nprint('The current \"lease_max\" TTL is: {lease_max}'.format(\n    lease_max=read_lease_response['data']['lease_max'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/aws/#create-or-update-role","title":"Create or Update Role","text":"<p><code>vaultx.api.secrets_engines.Aws.create_or_update_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ndescribe_ec2_policy_doc = {\n    'Version': '2012-10-17',\n    'Statement': [\n        {\n            'Resource': '*', \n            'Action': 'ec2:Describe*',\n            'Effect': 'Allow',\n        },\n    ],\n}\nclient.secrets.aws.create_or_update_role(\n    name='vaultx-role',\n    credential_type='assumed_role',\n    policy_document=describe_ec2_policy_doc,\n    policy_arns=['arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess'],\n)\n</code></pre>"},{"location":"usage/secrets_engines/aws/#legacy-parameters","title":"Legacy Parameters","text":"<p>Note: In previous versions of Vault (before version 0.11.0), this API route only supports the policy_document and policy_arns parameters (which vaultx will translate to policy and arn parameters respectively in the request sent to Vault). If running these versions of Vault, the legacy_params parameter on this method can be set to True.</p> <p>For older versions of Vault (any version before 0.11.0):</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ndescribe_ec2_policy_doc = {\n    'Version': '2012-10-17',\n    'Statement': [\n        {\n            'Resource': '*', \n            'Action': 'ec2:Describe*',\n            'Effect': 'Allow',\n        },\n    ],\n}\n\n# Note: with the legacy params, the `policy_arns` parameter is translated to `arn`\n# in the request sent to Vault and only one ARN is accepted. If a list is provided,\n# vaultx will only use the first ARN in the list.\nclient.secrets.aws.create_or_update_role(\n    name='vaultx-role',\n    credential_type='assumed_role',\n    policy_document=describe_ec2_policy_doc,\n    policy_arns='arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess',\n    legacy_params=True,\n)\n</code></pre>"},{"location":"usage/secrets_engines/aws/#read-role","title":"Read Role","text":"<p><code>vaultx.api.secrets_engines.Aws.read_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_role_response = client.secrets.aws.read_role(\n    name='vaultx-role',\n)\nprint('The credential type for role \"vaultx-role\" is: {cred_type}'.format(\n    cred_type=read_role_response['data']['credential_types'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/aws/#list-roles","title":"List Roles","text":"<p><code>vaultx.api.secrets_engines.Aws.list_roles()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_roles_response = client.secrets.aws.list_roles()\nprint('AWS secrets engine role listing: {roles}'.format(\n    roles=', '.join(list_roles_response['data']['keys'])\n))\n</code></pre>"},{"location":"usage/secrets_engines/aws/#delete-role","title":"Delete Role","text":"<p><code>vaultx.api.secrets_engines.Aws.delete_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.aws.delete_role(\n    name='vaultx-role',\n)\n</code></pre>"},{"location":"usage/secrets_engines/aws/#generate-credentials","title":"Generate Credentials","text":"<p><code>vaultx.api.secrets_engines.Aws.generate_credentials()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ngen_creds_response = client.secrets.aws.generate_credentials(\n    name='vaultx-role',\n)\nprint('Generated access / secret keys: {access} / {secret}'.format(\n    access=gen_creds_response['data']['access_key'],\n    secret=gen_creds_response['data']['secret_key'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/azure/","title":"Azure","text":"<p>Note: Every method under the Azure class includes a mount_point parameter that can be used to address the Azure secret engine under a custom mount path. E.g., If enabling the Azure secret engine using Vault\u2019s CLI commands via vault secrets enable -path=my-azure azure\u201d, the mount_point parameter in vaultx.api.secrets_engines.Azure() methods would need to be set to \u201cmy-azure\u201d.</p>"},{"location":"usage/secrets_engines/azure/#configure","title":"Configure","text":"<p><code>vaultx.api.secrets_engines.Azure.configure()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.azure.configure(\n    subscription_id='my-subscription-id',\n    tenant_id='my-tenant-id',\n)\n</code></pre>"},{"location":"usage/secrets_engines/azure/#read-config","title":"Read Config","text":"<p><code>vaultx.api.secrets_engines.Azure.read_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nazure_secret_config = client.secrets.azure.read_config()\nprint('The Azure secret engine is configured with a subscription ID of {id}'.format(\n    id=azure_secret_config['subscription_id'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/azure/#delete-config","title":"Delete Config","text":"<p><code>vaultx.api.secrets_engines.Azure.delete_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.azure.delete_config()\n</code></pre>"},{"location":"usage/secrets_engines/azure/#create-or-update-a-role","title":"Create Or Update A Role","text":"<p><code>vaultx.api.secrets_engines.Azure.create_or_update_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n\nazure_roles = [\n    {\n        'role_name': \"Contributor\",\n        'scope': \"/subscriptions/95e675fa-307a-455e-8cdf-0a66aeaa35ae\",\n    },\n]\nclient.secrets.azure.create_or_update_role(\n    name='my-azure-secret-role',\n    azure_roles=azure_roles,\n)\n</code></pre>"},{"location":"usage/secrets_engines/azure/#list-roles","title":"List Roles","text":"<p><code>vaultx.api.secrets_engines.Azure.list_roles()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nazure_secret_engine_roles = client.secrets.azure.list_roles()\nprint(f'The following Azure secret roles are configured: {\",\".join(roles['keys'])}')\n</code></pre>"},{"location":"usage/secrets_engines/azure/#generate-credentials","title":"Generate Credentials","text":"<p><code>vaultx.api.secrets_engines.Azure.generate_credentials()</code></p> <pre><code>import vaultx\nfrom azure.common.credentials import ServicePrincipalCredentials\n\nclient = vaultx.Client()\nazure_creds = client.secrets.azure.secret.generate_credentials(\n    name='some-azure-role-name',\n)\nazure_spc = ServicePrincipalCredentials(\n    client_id=azure_creds['client_id'],\n    secret=azure_creds['client_secret'],\n    tenant=TENANT_ID,\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/","title":"Database","text":"<p>Note: Every method under the Database class includes a mount_point parameter that can be used to address the Database secret engine under a custom mount path. E.g., If enabling the Database secret engine using Vault\u2019s CLI commands via vault secrets enable -path=my-database database, the mount_point parameter in vaultx.api.secrets_engines.Database() methods would be set to my-database.</p>"},{"location":"usage/secrets_engines/database/#enable-database-secrets-engine","title":"Enable Database Secrets Engine","text":"<pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.enable.secrets_engine(\n    backend_type='database',\n    path='my-database'\n)\n</code></pre> <p>Note: Example code below is for configuring and connecting to Postgres. See the official developer docs for a list of supported database plugins and detailed configuration requirements.</p>"},{"location":"usage/secrets_engines/database/#configuration","title":"Configuration","text":"<p><code>vaultx.api.secrets_engines.Database.configure()</code></p> <p>Configures the database engine:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.database.configure(\n    name='db-connection-name',\n    plugin_name='postgresql-database-plugin',\n    allowed_roles='role-name',\n    connection_url=f'postgresql://{{{{username}}}}:{{{{password}}}}@postgres:5432/postgres?sslmode=disable',\n    username='db-username',\n    password='db-password',\n)\n</code></pre> <p>Note: The database needs to be created and available to connect before you can configure the database secrets engine using the above configure method.</p>"},{"location":"usage/secrets_engines/database/#read-configuration","title":"Read Configuration","text":"<p><code>vaultx.api.secrets_engines.Database.read_connection()</code></p> <p>Returns the configuration settings for a connection mounted under a path of my-database:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nconnection_config = client.secrets.database.read_connection(\n    name='db-connection-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#list-connections","title":"List Connections","text":"<p><code>vaultx.api.secrets_engines.Database.list_connections()</code></p> <p>Returns a list of available connections:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nconnections = client.secrets.database.list_connections(\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#delete-connection","title":"Delete Connection","text":"<p><code>vaultx.api.secrets_engines.Database.delete_connection()</code></p> <p>Deletes a connection:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.database.delete_connection(\n    name='db-connection-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#reset-connection","title":"Reset Connection","text":"<p><code>vaultx.api.secrets_engines.Database.reset_connection()</code></p> <p>Closes a connection and its underlying plugin and restarts it with the configuration stored:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.database.reset_connection(\n    name='db-connection-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#create-role","title":"Create Role","text":"<p><code>vaultx.api.secrets_engines.Database.create_role()</code></p> <p>Creates or updates a role definition:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# SQL to create a new user with read only role to public schema\ncreation_statements = [\n    \"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';\",\n    \"GRANT SELECT ON ALL TABLES IN SCHEMA public TO \\\"{{name}}\\\";\"\n]\n\n# Create a new role for the PostgreSQL connection\nclient.secrets.database.create_role(\n    name='role-name',\n    db_name='db-connection-name',\n    creation_statements=creation_statements,\n    default_ttl='1h',\n    max_ttl='24h',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#read-a-role","title":"Read A Role","text":"<p><code>vaultx.api.secrets_engines.Database.read_role()</code></p> <p>Creates or updates a role definition:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nrole = client.secrets.database.read_role(\n    name='role-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#list-all-the-roles","title":"List All The Roles","text":"<p><code>vaultx.api.secrets_engines.Database.list_roles()</code></p> <p>Returns a list of available roles:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nroles = client.secrets.database.list_roles(\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#delete-a-role","title":"Delete A Role","text":"<p><code>vaultx.api.secrets_engines.Database.delete_role()</code></p> <p>Deletes a role definition:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.database.delete_role(\n    name='role-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#rotate-root-credentials","title":"Rotate Root Credentials","text":"<p><code>vaultx.api.secrets_engines.Database.rotate_root_credentials()</code></p> <p>Rotates the root credentials stored for the database connection. This user must have permissions to update its own password.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.database.rotate_root_credentials(\n    name='db-connection-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#generate-credentials","title":"Generate Credentials","text":"<p><code>vaultx.api.secrets_engines.Database.generate_credentials()</code></p> <p>Generates a new set of dynamic credentials based on the named role:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ncredentials = client.secrets.database.generate_credentials(\n    name='role-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#get-static-credentials","title":"Get Static Credentials","text":"<p><code>vaultx.api.secrets_engines.Database.get_static_credentials()</code></p> <p>Returns the current credentials based on the named static role:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ncredentials = client.secrets.database.get_static_credentials(\n    name='role-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#create-static-role","title":"Create Static Role","text":"<p><code>vaultx.api.secrets_engines.Database.create_static_role()</code></p> <p>Creates or updates a static role:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nrotation_statement = [\"ALTER USER \\\"{{name}}\\\" WITH PASSWORD '{{password}}';\"]\n\ncredentials = client.secrets.database.create_static_role(\n    name='role-name',\n    db_name='db-connection-name',\n    username='static-role-username', \n    rotation_statements=rotation_statement,\n    rotation_period=86400,\n    mount_point='my-database', \n)\n</code></pre> <p>Note: The username referenced above needs to be pre-created in the database prior to calling this method as Vault will be referencing this username to rotate its password.</p>"},{"location":"usage/secrets_engines/database/#read-static-role","title":"Read Static Role","text":"<p><code>vaultx.api.secrets_engines.Database.read_static_role()</code></p> <p>Queries a static role definition:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.database.read_static_role(\n    name='role-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#list-static-roles","title":"List Static Roles","text":"<p><code>vaultx.api.secrets_engines.Database.list_static_roles()</code></p> <p>Returns a list of available static roles:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nstatic_roles = client.secrets.database.list_static_roles(\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/database/#rotate-static-role-credentials","title":"Rotate Static Role Credentials","text":"<p><code>vaultx.api.secrets_engines.Database.rotate_static_role_credentials()</code></p> <p>This endpoint is used to rotate the Static Role credentials stored for a given role name. While Static Roles are rotated automatically by Vault at configured rotation periods, users can use this endpoint to manually trigger a rotation to change the stored password and reset the TTL of the Static Role\u2019s password.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.database.rotate_static_role_credentials(\n    name='role-name',\n    mount_point='my-database'\n)\n</code></pre>"},{"location":"usage/secrets_engines/gcp/","title":"GCP","text":""},{"location":"usage/secrets_engines/gcp/#configure","title":"Configure","text":"<p><code>vaultx.api.secrets_engines.Gcp.configure(credentials=None, ttl=None, max_ttl=None, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\n\ncredentials = test_utils.load_config_file('example.jwt.json')\nconfigure_response = client.secrets.gcp.configure(\n    credentials=credentials,\n    max_ttl=3600,\n)\nprint(configure_response)\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#rotate-root-credentials","title":"Rotate Root Credentials","text":"<p><code>vaultx.api.secrets_engines.Gcp.rotate_root_credentials(mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nrotate_response = client.secrets.gcp.rotate_root_credentials()\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#read-config","title":"Read Config","text":"<p><code>vaultx.api.secrets_engines.Gcp.read_config(mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nread_config_response = client.secrets.gcp.read_config()\nprint('Max TTL for GCP secrets engine set to: {max_ttl}'.format(max_ttl=read_config_response['data']['max_ttl']))\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#create-or-update-roleset","title":"Create Or Update Roleset","text":"<p><code>vaultx.api.secrets_engines.Gcp.create_or_update_roleset(name, project, bindings, secret_type=None, token_scopes=None, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\n\nbindings = \"\"\"\n    resource \"//cloudresourcemanager.googleapis.com/project/some-gcp-project-id\" {\n      roles = [\n        \"roles/viewer\"\n      ],\n    }\n\"\"\"\ntoken_scopes = [\n    'https://www.googleapis.com/auth/cloud-platform',\n    'https://www.googleapis.com/auth/bigquery',\n]\n\nroleset_response = client.secrets.gcp.create_or_update_roleset(\n    name='vaultx-doctest',\n    project='some-gcp-project-id',\n    bindings=bindings,\n    token_scopes=token_scopes,\n)\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#rotate-roleset-account","title":"Rotate Roleset Account","text":"<p><code>vaultx.api.secrets_engines.Gcp.rotate_roleset_account(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nrotate_response = client.secrets.gcp.rotate_roleset_account(name='vaultx-doctest')\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#rotate-roleset-account-key","title":"Rotate Roleset Account Key","text":"<p><code>vaultx.api.secrets_engines.Gcp.rotate_roleset_account_key(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nrotate_response = client.secrets.gcp.rotate_roleset_account_key(name='vaultx-doctest')\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#read-roleset","title":"Read Roleset","text":"<p><code>vaultx.api.secrets_engines.Gcp.read_roleset(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nread_response = client.secrets.gcp.read_roleset(name='vaultx-doctest')\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#list-rolesets","title":"List Rolesets","text":"<p><code>vaultx.api.secrets_engines.Gcp.list_rolesets(mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nlist_response = client.secrets.gcp.list_rolesets()\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#delete-roleset","title":"Delete Roleset","text":"<p><code>vaultx.api.secrets_engines.Gcp.delete_roleset(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ndelete_response = client.secrets.gcp.delete_roleset(name='vaultx-doctest')\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#generate-oauth2-access-token","title":"Generate Oauth2 Access Token","text":"<p><code>vaultx.api.secrets_engines.Gcp.generate_oauth2_access_token(roleset, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntoken_response = client.secrets.gcp.generate_oauth2_access_token(roleset='vaultx-doctest')\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#generate-service-account-key","title":"Generate Service Account Key","text":"<p><code>vaultx.api.secrets_engines.Gcp.generate_service_account_key(roleset, key_algorithm='KEY_ALG_RSA_2048', key_type='TYPE_GOOGLE_CREDENTIALS_FILE', method='POST', mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nkey_response = client.secrets.gcp.generate_service_account_key(roleset='vaultx-doctest')\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#create-or-update-static-account","title":"Create Or Update Static Account","text":"<p><code>vaultx.api.secrets_engines.Gcp.create_or_update_static_account(name, service_account_email, bindings=None, secret_type=None, token_scopes=None, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ncreate_response = client.secrets.gcp.create_or_update_static_account(\n  name=\"vaultx-doctest\",\n  service_account_email=\"vaultx-doctest@some-gcp-project-id.iam.gserviceaccount.com\",\n  secret_type=\"access_token\",\n  token_scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\n)\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#rotate-static-account-key","title":"Rotate Static Account Key","text":"<p><code>vaultx.api.secrets_engines.Gcp.rotate_static_account_key(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nrotate_response = client.secrets.gcp.rotate_static_account_key(name=\"vaultx-doctest\")\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#read-static-account","title":"Read Static Account","text":"<p><code>vaultx.api.secrets_engines.Gcp.read_static_account(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nread_response = client.secrets.gcp.read_static_account(name=\"vaultx-doctest\")\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#list-static-accounts","title":"List Static Accounts","text":"<p><code>vaultx.api.secrets_engines.Gcp.list_static_accounts(mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nlist_response = client.secrets.gcp.list_static_accounts()\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#delete-static-account","title":"Delete Static Account","text":"<p><code>vaultx.api.secrets_engines.Gcp.delete_static_account(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ndelete_response = client.secrets.gcp.delete_static_account(name=\"vaultx-doctest\")\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#generate-static-account-oauth2-access-token","title":"Generate Static Account OAuth2 Access Token","text":"<p><code>vaultx.api.secrets_engines.Gcp.generate_static_account_oauth2_access_token(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntoken_response = client.secrets.gcp.generate_static_account_oauth2_access_token(\n  name=\"vaultx-doctest\",\n)\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#generate-static-account-service-account-key","title":"Generate Static Account Service Account Key","text":"<p><code>vaultx.api.secrets_engines.Gcp.generate_static_account_service_account_key(name, key_algorithm='KEY_ALG_RSA_2048', key_type='TYPE_GOOGLE_CREDENTIALS_FILE', method='POST', mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nkey_response = client.secrets.gcp.generate_static_account_service_account_key(\n  name=\"vaultx-doctest\",\n)\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#create-or-update-impersonated-account","title":"Create Or Update Impersonated Account","text":"<p><code>vaultx.api.secrets_engines.Gcp.create_or_update_impersonated_account(name, service_account_email, token_scopes=None, ttl=None, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ncreate_response = client.secrets.gcp.create_or_update_impersonated_account(\n  name=\"vaultx-doctest\",\n  service_account_email=\"vaultx-doctest@some-gcp-project-id.iam.gserviceaccount.com\",\n  token_scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\n  ttl='4h'\n)\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#read-impersonated-account","title":"Read Impersonated Account","text":"<p><code>vaultx.api.secrets_engines.Gcp.read_impersonated_account(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nread_response = client.secrets.gcp.read_impersonated_account(name=\"vaultx-doctest\")\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#list-impersonated-accounts","title":"List Impersonated Accounts","text":"<p><code>vaultx.api.secrets_engines.Gcp.list_impersonated_accounts(mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nlist_response = client.secrets.gcp.list_impersonated_accounts()\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#delete-impersonated-account","title":"Delete Impersonated Account","text":"<p><code>vaultx.api.secrets_engines.Gcp.delete_impersonated_account(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ndelete_response = client.secrets.gcp.delete_impersonated_account(name=\"vaultx-doctest\")\n</code></pre>"},{"location":"usage/secrets_engines/gcp/#generate-impersonated-account-oauth2-access-token","title":"Generate Impersonated Account OAuth2 Access Token","text":"<p><code>vaultx.api.secrets_engines.Gcp.generate_impersonated_account_oauth2_access_token(name, mount_point='gcp')</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntoken_response = client.secrets.gcp.generate_impersonated_account_oauth2_access_token(\n  name=\"vaultx-doctest\",\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/","title":"Identity","text":""},{"location":"usage/secrets_engines/identity/#entity","title":"Entity","text":""},{"location":"usage/secrets_engines/identity/#create-or-update-entity","title":"Create or Update Entity","text":"<p><code>vaultx.api.secrets_engines.Identity.create_or_update_entity()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ncreate_response = client.secrets.identity.create_or_update_entity(\n    name='vaultx-entity',\n    metadata=dict(extra_data='yup'),\n)\nentity_id = create_response['data']['id']\nprint('Entity ID for \"vaultx-entity\" is: {id}'.format(id=entity_id))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#create-or-update-entity-by-name","title":"Create or Update Entity by Name","text":"<p><code>vaultx.api.secrets_engines.Identity.create_or_update_entity_by_name()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.create_or_update_entity_by_name(\n    name='vaultx-entity',\n    metadata=dict(new_data='uhuh'),\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-entity","title":"Read Entity","text":"<p><code>vaultx.api.secrets_engines.Identity.read_entity()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_response = client.secrets.identity.read_entity(\n    entity_id=entity_id,\n)\nname = read_response['data']['name']\nprint('Name for entity ID {id} is: {name}'.format(id=entity_id, name=name))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-entity-by-name","title":"Read Entity by Name","text":"<p><code>vaultx.api.secrets_engines.Identity.read_entity_by_name()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_response = client.secrets.identity.read_entity_by_name(\n    name='vaultx-entity',\n)\nentity_id = read_response['data']['id']\nprint('Entity ID for \"vaultx-entity\" is: {id}'.format(id=entity_id))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#update-entity","title":"Update Entity","text":"<p><code>vaultx.api.secrets_engines.Identity.update_entity()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.update_entity(\n    entity_id=entity_id,\n    metadata=dict(new_metadata='yup'),\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#delete-entity","title":"Delete Entity","text":"<p><code>vaultx.api.secrets_engines.Identity.delete_entity()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.delete_entity(\n    entity_id=entity_id,\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#delete-entity-by-name","title":"Delete Entity by Name","text":"<p><code>vaultx.api.secrets_engines.Identity.delete_entity_by_name()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.delete_entity_by_name(\n    name='vaultx-entity',\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#list-entities","title":"List Entities","text":"<p><code>vaultx.api.secrets_engines.Identity.list_entities()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_response = client.secrets.identity.list_entities()\nentity_keys = list_response['data']['keys']\nprint('The following entity IDs are currently configured: {keys}'.format(keys=entity_keys))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#list-entities-by-name","title":"List Entities by Name","text":"<p><code>vaultx.api.secrets_engines.Identity.list_entities_by_name()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_response = client.secrets.identity.list_entities_by_name()\nentity_keys = list_response['data']['keys']\nprint('The following entity names are currently configured: {keys}'.format(keys=entity_keys))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#merge-entities","title":"Merge Entities","text":"<p><code>vaultx.api.secrets_engines.Identity.merge_entities()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.merge_entities(\n    from_entity_ids=from_entity_ids,\n    to_entity_id=to_entity_id,\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#entity-alias","title":"Entity Alias","text":""},{"location":"usage/secrets_engines/identity/#create-or-update-entity-alias","title":"Create or Update Entity Alias","text":"<p><code>vaultx.api.secrets_engines.Identity.create_or_update_entity_alias()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ncreate_response = client.secrets.identity.create_or_update_entity_alias(\n    name='vaultx-entity-alias',\n    canonical_id=entity_id,\n    mount_accessor='auth_approle_73c16de3',\n)\nalias_id = create_response['data']['id']\nprint('Alias ID for \"vaultx-entity-alias\" is: {id}'.format(id=alias_id))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-entity-alias","title":"Read Entity Alias","text":"<p><code>vaultx.api.secrets_engines.Identity.read_entity_alias()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_response = client.secrets.identity.read_entity_alias(\n    alias_id=alias_id,\n)\nname = read_response['data']['name']\nprint('Name for entity alias {id} is: {name}'.format(id=alias_id, name=name))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#update-entity-alias","title":"Update Entity Alias","text":"<p><code>vaultx.api.secrets_engines.Identity.update_entity_alias()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.update_entity_alias(\n    alias_id=alias_id,\n    name='new-alias-name',\n    canonical_id=entity_id,\n    mount_accessor='auth_approle_73c16de3',\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#list-entity-aliases","title":"List Entity Aliases","text":"<p><code>vaultx.api.secrets_engines.Identity.list_entity_aliases()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_response = client.secrets.identity.list_entity_aliases()\nalias_keys = list_response['data']['keys']\nprint('The following entity alias IDs are currently configured: {keys}'.format(keys=alias_keys))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#delete-entity-alias","title":"Delete Entity Alias","text":"<p><code>vaultx.api.secrets_engines.Identity.delete_entity_alias()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.delete_entity_alias(\n    alias_id=alias_id,\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#group","title":"Group","text":""},{"location":"usage/secrets_engines/identity/#create-or-update-group","title":"Create or Update Group","text":"<p><code>vaultx.api.secrets_engines.Identity.create_or_update_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ncreate_response = client.secrets.identity.create_or_update_group(\n    name='vaultx-group',\n    metadata=dict(extra_data='we gots em'),\n)\ngroup_id = create_response['data']['id']\nprint('Group ID for \"vaultx-group\" is: {id}'.format(id=group_id))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-group","title":"Read Group","text":"<p><code>vaultx.api.secrets_engines.Identity.read_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_response = client.secrets.identity.read_group(\n    group_id=group_id,\n)\nname = read_response['data']['name']\nprint('Name for group ID {id} is: {name}'.format(id=group_id, name=name))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#update-group","title":"Update Group","text":"<p><code>vaultx.api.secrets_engines.Identity.update_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.update_group(\n    group_id=group_id,\n    metadata=dict(new_metadata='yup'),\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#delete-group","title":"Delete Group","text":"<p><code>vaultx.api.secrets_engines.Identity.delete_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.delete_group(\n    group_id=group_id,\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#list-groups","title":"List Groups","text":"<p><code>vaultx.api.secrets_engines.Identity.list_groups()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_response = client.secrets.identity.list_groups()\ngroup_keys = list_response['data']['keys']\nprint('The following group IDs are currently configured: {keys}'.format(keys=group_keys))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#list-groups-by-name","title":"List Groups by Name","text":"<p><code>vaultx.api.secrets_engines.Identity.list_groups_by_name()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_response = client.secrets.identity.list_groups_by_name()\ngroup_keys = list_response['data']['keys']\nprint('The following group names are currently configured: {keys}'.format(keys=group_keys))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#create-or-update-group-by-name","title":"Create or Update Group by Name","text":"<p><code>vaultx.api.secrets_engines.Identity.create_or_update_group_by_name()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.create_or_update_group_by_name(\n    name='vaultx-group',\n    metadata=dict(new_data='uhuh'),\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-group-by-name","title":"Read Group by Name","text":"<p><code>vaultx.api.secrets_engines.Identity.read_group_by_name()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_response = client.secrets.identity.read_group_by_name(\n    name='vaultx-group',\n)\ngroup_id = read_response['data']['id']\nprint('Group ID for \"vaultx-group\" is: {id}'.format(id=group_id))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#delete-group-by-name","title":"Delete Group by Name","text":"<p><code>vaultx.api.secrets_engines.Identity.delete_group_by_name()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.delete_group_by_name(\n    name='vaultx-group',\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#group-alias","title":"Group Alias","text":""},{"location":"usage/secrets_engines/identity/#create-or-update-group-alias","title":"Create or Update Group Alias","text":"<p><code>vaultx.api.secrets_engines.Identity.create_or_update_group_alias()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ncreate_response = client.secrets.identity.create_or_update_group_alias(\n    name='vaultx-group-alias',\n    canonical_id=group_id,\n    mount_accessor='auth_approle_73c16de3',\n)\nalias_id = create_response['data']['id']\nprint('Group alias ID for \"vaultx-group-alias\" is: {id}'.format(id=alias_id))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#update-group-alias","title":"Update Group Alias","text":"<p><code>vaultx.api.secrets_engines.Identity.update_group_alias()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.update_group_alias(\n    alias_id=alias_id,\n    name='new-alias-name',\n    canonical_id=group_id,\n    mount_accessor='auth_approle_73c16de3',\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-group-alias","title":"Read Group Alias","text":"<p><code>vaultx.api.secrets_engines.Identity.read_group_alias()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_response = client.secrets.identity.read_group_alias(\n    alias_id=alias_id,\n)\nname = read_response['data']['name']\nprint('Name for group alias {id} is: {name}'.format(id=alias_id, name=name))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#delete-group-alias","title":"Delete Group Alias","text":"<p><code>vaultx.api.secrets_engines.Identity.delete_group_alias()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.delete_group_alias(\n    alias_id=alias_id,\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#list-group-aliases","title":"List Group Aliases","text":"<p><code>vaultx.api.secrets_engines.Identity.list_group_aliases()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_response = client.secrets.identity.list_group_aliases()\nalias_keys = list_response['data']['keys']\nprint('The following group alias IDs are currently configured: {keys}'.format(keys=alias_keys))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#lookup","title":"Lookup","text":""},{"location":"usage/secrets_engines/identity/#lookup-entity","title":"Lookup Entity","text":"<p><code>vaultx.api.secrets_engines.Identity.lookup_entity()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlookup_response = client.secrets.identity.lookup_entity(\n    name='vaultx-entity',\n)\nentity_id = lookup_response['data']['id']\nprint('Entity ID for \"vaultx-entity\" is: {id}'.format(id=entity_id))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#lookup-group","title":"Lookup Group","text":"<p><code>vaultx.api.secrets_engines.Identity.lookup_group()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlookup_response = client.secrets.identity.lookup_group(\n    name='vaultx-group',\n)\ngroup_id = lookup_response['data']['id']\nprint('Group ID for \"vaultx-group\" is: {id}'.format(id=group_id))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#tokens","title":"Tokens","text":""},{"location":"usage/secrets_engines/identity/#configure-tokens-backend","title":"Configure Tokens Backend","text":"<p><code>vaultx.api.secrets_engines.Identity.configure_tokens_backend()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.configure_tokens_backend(\n    issuer='https://python-vaultx.org:1234',\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-tokens-backend-configuration","title":"Read Tokens Backend Configuration","text":"<p><code>vaultx.api.secrets_engines.Identity.read_tokens_backend_configuration()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nconfig = client.secrets.identity.read_tokens_backend_configuration()\nprint('Tokens backend issuer: {issuer}'.format(issuer=config['data']['issuer']))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#create-named-key","title":"Create Named Key","text":"<p><code>vaultx.api.secrets_engines.Identity.create_named_key()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.create_named_key(\n    name='vaultx',\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-named-key","title":"Read Named Key","text":"<p><code>vaultx.api.secrets_engines.Identity.read_named_key()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nkey_response = client.secrets.identity.read_named_key(\n    name='vaultx',\n)\nprint('Identity key \"vaultx\" algorithm is: {algorithm}'.format(\n    algorithm=key_response['data']['algorithm'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#delete-named-key","title":"Delete Named Key","text":"<p><code>vaultx.api.secrets_engines.Identity.delete_named_key()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.delete_named_key(\n    name='vaultx',\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#list-named-keys","title":"List Named Keys","text":"<p><code>vaultx.api.secrets_engines.Identity.list_named_keys()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_keys_resp = client.secrets.identity.list_named_keys()\nprint('Current token key names: {names}'.format(\n    names=', '.join(list_keys_resp['data']['keys']),\n))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#rotate-named-key","title":"Rotate Named Key","text":"<p><code>vaultx.api.secrets_engines.Identity.rotate_named_key()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.rotate_named_key(\n    name='vaultx',\n    verification_ttl='24h',\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#create-or-update-role","title":"Create or Update Role","text":"<p><code>vaultx.api.secrets_engines.Identity.create_or_update_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nkey_name = 'vaultx-key'\ntoken_client_id = 'some-client-id'\nclient.secrets.identity.create_named_key(\n    name=key_name,\n    allowed_client_ids=[token_client_id],\n)\nclient.secrets.identity.create_or_update_role(\n    name='vaultx-person',\n    key_name=key_name,\n    client_id=token_client_id,\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-role","title":"Read Role","text":"<p><code>vaultx.api.secrets_engines.Identity.read_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_resp = client.secrets.identity.read_role(\n    name='vaultx-person',\n)\nprint('Identity role \"vaultx-person\" is set to use key: {key_name}'.format(\n    key_name=read_resp['data']['key'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#delete-role","title":"Delete Role","text":"<p><code>vaultx.api.secrets_engines.Identity.delete_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.identity.delete_role(\n    name='vaultx-person',\n)\n</code></pre>"},{"location":"usage/secrets_engines/identity/#list-roles","title":"List Roles","text":"<p><code>vaultx.api.secrets_engines.Identity.list_roles()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nresponse = client.secrets.identity.list_roles()\nprint('Current token role names: {names}'.format(\n    names=', '.join(response['data']['keys']),\n))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#generate-signed-id-token","title":"Generate Signed ID Token","text":"<p><code>vaultx.api.secrets_engines.Identity.generate_signed_id_token()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nresponse = client.secrets.identity.generate_signed_id_token(\n    name='vaultx-person',\n)\nprint('Generated signed id token: {token}'.format(\n    token=response['data']['token'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#introspect-signed-id-token","title":"Introspect Signed ID Token","text":"<p><code>vaultx.api.secrets_engines.Identity.introspect_signed_id_token()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nresponse = client.secrets.identity.introspect_signed_id_token(\n    token='some-generated-signed-id-token',\n)\nprint('Specified token is active?: {active}'.format(\n    active=response['active'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-well-known-configurations","title":"Read .well-known Configurations","text":"<p><code>vaultx.api.secrets_engines.Identity.read_well_known_configurations()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nresponse = client.secrets.identity.read_well_known_configurations()\nprint('JWKS URI is: {jwks_uri}'.format(\n    jwks_uri=response['jwks_uri'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/identity/#read-active-public-keys","title":"Read Active Public Keys","text":"<p><code>vaultx.api.secrets_engines.Identity.read_active_public_keys()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nresponse = client.secrets.identity.read_active_public_keys()\nprint('Active public keys: {keys}'.format(\n    keys=response['keys'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/kv/","title":"KV Secrets Engines","text":"<p>The <code>vaultx.api.secrets_engines.Kv</code> instance under the <code>Client class's secrets.kv attribute</code> is a wrapper  to expose either version 1 (<code>KvV1</code>) or version 2 of the key/value secrets engines\u2019 API methods (<code>KvV2</code>).  At present, this class defaults to version 2 when accessing methods on the instance.</p>"},{"location":"usage/secrets_engines/kv/#setting-the-default-kv-version","title":"Setting the Default KV Version","text":"<pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.default_kv_version = 1\nclient.secrets.kv.read_secret(path='vaultx')  # =&gt; calls vaultx.api.secrets_engines.KvV1.read_secret\n</code></pre>"},{"location":"usage/secrets_engines/kv/#explicitly-calling-a-kv-version-method","title":"Explicitly Calling a KV Version Method","text":"<pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v1.read_secret(path='vaultx')\nclient.secrets.kv.v2.read_secret_version(path='vaultx')\n</code></pre>"},{"location":"usage/secrets_engines/kv/#specific-kv-version-usage","title":"Specific KV Version Usage","text":"<ul> <li>KV - Version 1</li> <li>KV - Version 2</li> </ul>"},{"location":"usage/secrets_engines/kv_v1/","title":"KV - Version 1","text":"<p>Note: Every method under the <code>Kv class's v1 attribute</code> includes a mount_point parameter  that can be used to address the KvV1 secret engine under a custom mount path.  E.g., If enabling the KvV1 secret engine using Vault\u2019s CLI commands  via vault secrets enable \"-path=my-kvv1 -version=1 kv\",  the mount_point parameter in <code>vaultx.api.secrets_engines.KvV1()</code> methods would be set to \"my-kvv1\".</p>"},{"location":"usage/secrets_engines/kv_v1/#read-a-secret","title":"Read a Secret","text":"<p><code>vaultx.api.secrets_engines.KvV1.read_secret()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# The following path corresponds, when combined with the mount point, to a full Vault API route of \"v1/secretz/vaultx\"\nmount_point = 'secretz'\nsecret_path = 'vaultx'\n\nread_secret_result = client.secrets.kv.v1.read_secret(\n    path=secret_path,\n    mount_point=mount_point,\n)\n\npsst = psst=read_secret_result['data']['psst']\nprint(f'The \"psst\" key under the secret path (\"/v1/secret/vaultx\") is: {psst}')\n</code></pre>"},{"location":"usage/secrets_engines/kv_v1/#list-secrets","title":"List Secrets","text":"<p><code>vaultx.api.secrets_engines.KVV1.list_secrets()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\nvaultx_secret = {\n    'psst': 'this is so secret yall',\n}\n\nclient.secrets.kv.v1.create_or_update_secret(\n    path='vaultx',\n    secret=vaultx_secret,\n)\n\nread_secret_result = client.secrets.kv.v1.read_secret(\n    path='vaultx',\n)\n\npsst = read_secret_result['data']['psst']\nprint(f'The \"psst\" key under the secret path (\"/v1/secret/vaultx\") is: {psst}')\n</code></pre>"},{"location":"usage/secrets_engines/kv_v1/#create-or-update-a-secret","title":"Create or Update a Secret","text":"<p><code>vaultx.api.secrets_engines.KvV1.create_or_update_secret()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\nvaultx_secret = {\n    'psst': 'this is so secret yall',\n}\n\nclient.secrets.kv.v1.create_or_update_secret(\n    path='vaultx',\n    secret=vaultx_secret,\n)\n\nread_secret_result = client.secrets.kv.v1.read_secret(\n    path='vaultx',\n)\n\npsst = read_secret_result['data']['psst']\nprint(f'The \"psst\" key under the secret path (\"/v1/secret/vaultx\") is: {psst}')\n</code></pre>"},{"location":"usage/secrets_engines/kv_v1/#delete-a-secret","title":"Delete a Secret","text":"<p><code>vaultx.api.secrets_engines.KvV1.delete_secret()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v1.delete_secret(\n    path='vaultx',\n)\n\n# The following will raise a VaultxError with 404 status code\nread_secret_result = client.secrets.kv.v1.read_secret(\n    path='vaultx',\n)\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/","title":"KV - Version 2","text":"<p>Note: Every method under the <code>Kv class's v2 attribute</code> includes a mount_point parameter that can be used  to address the KvV2 secret engine under a custom mount path.  E.g., If enabling the KvV2 secret engine using Vault\u2019s CLI commands via vault secrets enable  \"-path=my-kvv2 -version=2 kv\", the mount_point parameter in <code>vaultx.api.secrets_engines.KvV2()</code> methods would be set to \"my-kvv2\".</p>"},{"location":"usage/secrets_engines/kv_v2/#configuration","title":"Configuration","text":"<p><code>vaultx.api.secrets_engines.KvV2.configure()</code></p> <p>Setting the default max_versions for a key/value engine version 2 under a path of kv:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.configure(\n    max_versions=20,\n    mount_point='kv',\n)\n</code></pre> <p>Setting the default cas_required (check-and-set required) flag under the implicit default path of secret:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.configure(\n    cas_required=True,\n)\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#read-configuration","title":"Read Configuration","text":"<p><code>vaultx.api.secrets_engines.KvV2.configure()</code></p> <p>Reading the configuration of a KV version 2 engine mounted under a path of kv:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nkv_configuration = client.secrets.kv.v2.read_configuration(\n    mount_point='kv',\n)\n\nmax_ver = kv_configuration['data']['max_versions']\nprint(f'Config under path \"kv\": max_versions set to \"{max_ver}\"')\n\ncas = kv_configuration['data']['cas_required']\nprint('Config under path \"kv\": check-and-set require flag set to {cas}')\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#read-secret-versions","title":"Read Secret Versions","text":"<p><code>vaultx.api.secrets_engines.KvV2.read_secret_version()</code></p> <p>Read the latest version of a given secret/path (\u201cvaultx\u201d):</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nsecret_version_response = client.secrets.kv.v2.read_secret_version(\n    path='vaultx',\n)\n\ndata = secret_version_response['data']['data'].keys()\nprint(f'Latest version of secret under path \"vaultx\" contains the following keys: {data}')\n\ndate = secret_version_response['data']['metadata']['created_time']\nprint(f'Latest version of secret under path \"vaultx\" created at: {date}')\n\nver = secret_version_response['data']['metadata']['version']\nprint(f'Latest version of secret under path \"vaultx\" is version #{ver}')\n</code></pre> <p>Read specific version (1) of a given secret/path (\u201cvaultx\u201d):</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nsecret_version_response = client.secrets.kv.v2.read_secret_version(\n    path='vaultx',\n    version=1,\n)\n\ndata = secret_version_response['data']['data'].keys()\nprint(f'Version 1 of secret under path \"vaultx\" contains the following keys: {data}')\n\ndate = secret_version_response['data']['metadata']['created_time']\nprint(f'Version 1 of secret under path \"vaultx\" created at: {date}')\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#createupdate-secret","title":"Create/Update Secret","text":"<p><code>vaultx.api.secrets_engines.KvV2.create_or_update_secret()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.create_or_update_secret(\n    path='vaultx',\n    secret=dict(pssst='this is secret'),\n)\n</code></pre> <p>cas parameter with an argument that doesn\u2019t match the current version:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Assuming a current version of \"6\" for the path \"vaultx\" =&gt;\nclient.secrets.kv.v2.create_or_update_secret(\n    path='vaultx',\n    secret=dict(pssst='this is secret'),\n    cas=5,\n)  # Raises vaultx.exceptions.InvalidRequest\n</code></pre> <p>cas parameter set to 0 will only succeed if the path hasn\u2019t already been written.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.create_or_update_secret(\n    path='vaultx',\n    secret=dict(pssst='this is secret #1'),\n    cas=0,\n)\n\nclient.secrets.kv.v2.create_or_update_secret(\n    path='vaultx',\n    secret=dict(pssst='this is secret #2'),\n    cas=0,\n)  # =&gt; Raises VaultxError with 400 status code\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#patch-existing-secret","title":"Patch Existing Secret","text":"<p>Method (similar to the Vault CLI command vault kv patch) to update an existing path.  Either to add a new key/value to the secret and/or update the value for an existing key.  Raises a VaultxError if the path hasn\u2019t been written to previously.</p> <p><code>vaultx.api.secrets_engines.KvV2.patch()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.patch(\n    path='vaultx',\n    secret=dict(pssst='this is a patched secret'),\n)\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#delete-latest-version-of-secret","title":"Delete Latest Version of Secret","text":"<p><code>vaultx.api.secrets_engines.KvV2.delete_latest_version_of_secret()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.delete_latest_version_of_secret(\n    path=vaultx,\n)\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#delete-secret-versions","title":"Delete Secret Versions","text":"<p><code>vaultx.api.secrets_engines.KvV2.delete_secret_versions()</code></p> <p>Marking the first 3 versions of a secret deleted under path \u201cvaultx\u201d:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.delete_secret_versions(\n    path='vaultx',\n    versions=[1, 2, 3],\n)\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#undelete-secret-version","title":"Undelete Secret Version","text":"<p><code>vaultx.api.secrets_engines.KvV2.undelete_secret_versions()</code></p> <p>Marking the last 3 versions of a secret deleted under path \u201cvaultx\u201d as \u201cundeleted\u201d:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nvaultx_path_metadata = client.secrets.kv.v2.read_secret_metadata(\n    path='vaultx',\n)\n\noldest_version = vaultx_path_metadata['data']['oldest_version']\ncurrent_version = vaultx_path_metadata['data']['current_version']\nversions_to_undelete = range(max(oldest_version, current_version - 2), current_version + 1)\n\nclient.secrets.kv.v2.undelete_secret_versions(\n    path='vaultx',\n    versions=versions_to_undelete,\n)\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#destroy-secret-versions","title":"Destroy Secret Versions","text":"<p><code>vaultx.api.secrets_engines.KvV2.destroy_secret_versions()</code></p> <p>Destroying the first three versions of a secret under path \u2018vaultx\u2019:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.destroy_secret_versions(\n    path='vaultx',\n    versions=[1, 2, 3],\n)\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#list-secrets","title":"List Secrets","text":"<p><code>vaultx.api.secrets_engines.KvV2.list_secrets()</code></p> <p>Listing secrets under the \u2018vaultx\u2019 path prefix:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.create_or_update_secret(\n    path='vaultx/big-ole-secret',\n    secret=dict(pssst='this is a large secret'),\n)\n\nclient.secrets.kv.v2.create_or_update_secret(\n    path='vaultx/lil-secret',\n    secret=dict(pssst='this secret... not so big'),\n)\n\nlist_response = client.secrets.kv.v2.list_secrets(\n    path='vaultx',\n)\n\nprint('The following paths are available under \"vaultx\" prefix: {keys}'.format(\n    keys=','.join(list_response['data']['keys']),\n))\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#read-secret-metadata","title":"Read Secret Metadata","text":"<p><code>vaultx.api.secrets_engines.KvV2.read_secret_metadata()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nvaultx_path_metadata = client.secrets.kv.v2.read_secret_metadata(\n    path='vaultx',\n)\n\nprint('Secret under path vaultx is on version {cur_ver}, with an oldest version of {old_ver}'.format(\n    cur_ver=vaultx_path_metadata['data']['oldest_version'],\n    old_ver=vaultx_path_metadata['data']['current_version'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#update-metadata","title":"Update Metadata","text":"<p><code>vaultx.api.secrets_engines.KvV2.update_metadata()</code></p> <p>Set max versions for a given path (\u201cvaultx\u201d) to 3:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.update_metadata(\n    path='vaultx',\n    max_versions=3,\n)\n</code></pre> <p>Set cas (check-and-set) parameter as required for a given path (\u201cvaultx\u201d):</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.update_metadata(\n    path='vaultx',\n    cas_required=True,\n)\n</code></pre> <p>Set \u201cdelete_version_after\u201d value to 30 minutes for all new versions written to the \u201cvaultx\u201d path / key:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.update_metadata(\n    path='vaultx',\n    delete_version_after=\"30m\",\n)\n</code></pre> <p>Describe the secret with custom metadata values in <code>custom_metadata</code>:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclients.secrets.kv.v2.update_metadata(\n    path='vaultx',\n    custom_metadata={\n        \"type\": \"api-token\",\n        \"color\": \"blue\",\n    },\n)\n</code></pre>"},{"location":"usage/secrets_engines/kv_v2/#delete-metadata-and-all-versions","title":"Delete Metadata and All Versions","text":"<p><code>vaultx.api.secrets_engines.KvV2.delete_metadata_and_all_versions()</code></p> <p>Delete all versions and metadata for a given path:</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.secrets.kv.v2.delete_metadata_and_all_versions(\n    path='vaultx',\n)\n</code></pre>"},{"location":"usage/secrets_engines/ldap/","title":"LDAP","text":""},{"location":"usage/secrets_engines/ldap/#configure-ldap-secrets-engine","title":"Configure LDAP Secrets Engine","text":"<p><code>vaultx.api.secrets_engines.LDAP.configure()</code></p> <p>Configure the LDAP secrets engine to either manage service accounts or service account libraries.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\n# Not all these settings may apply to your setup, refer to Vault\n# documentation for context of what to use here\n\nconfig_response = client.secrets.ldap.configure(\n    binddn='username@domain.fqdn',  # A UPN or DN can be used for this value, Vault resolves the user to a DN silently\n    bindpass='***********',\n    url='ldaps://domain.fqdn',\n    userdn='cn=Users,dn=domain,dn=fqdn',\n    upndomain='domain.fqdn',\n    userattr=\"cn\",\n    schema=\"openldap\"\n)\nprint(config_response)\n</code></pre>"},{"location":"usage/secrets_engines/ldap/#read-config","title":"Read Config","text":"<p><code>vaultx.api.secrets_engines.LDAP.read_config()</code></p> <p>Return the LDAP Secret Engine configuration.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nconfig_response = client.secrets.ldap.read_config()\nprint(config_response)\n</code></pre>"},{"location":"usage/secrets_engines/ldap/#rotate-root","title":"Rotate Root","text":"<p><code>vaultx.api.secrets_engines.LDAP.rotate_root()</code></p> <p>Rotate the password for the <code>binddn</code> entry used to manage LDAP. This generated password will only be known to Vault and will not be retrievable once rotated.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nrotate_response = client.secrets.ldap.rotate_root()\nprint(rotate_response)\n</code></pre>"},{"location":"usage/secrets_engines/ldap/#create-or-update-static-role","title":"Create or Update Static Role","text":"<p><code>vaultx.api.secrets_engines.LDAP.create_or_update_static_role()</code></p> <p>Create or update a role which allows the retrieval and rotation of an LDAP account. Retrieve and rotate the actual credential via <code>generate_static_credentials()</code>.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nrole_response = client.secrets.ldap.create_or_update_static_role(\n    name='vaultx-role',\n    username='sql-service-account',\n    dn='cn=sql-service-account,dc=petshop,dc=com',\n    rotation_period=\"60s\"\n)\nprint(role_response)\n</code></pre>"},{"location":"usage/secrets_engines/ldap/#read-static-role","title":"Read Static Role","text":"<p><code>vaultx.api.secrets_engines.LDAP.read_static_role()</code></p> <p>Retrieve the role configuration which allows the retrieval and rotation of an LDAP account. Retrieve and rotate the actual credential via <code>generate_static_credentials()</code>.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nrole_response = client.secrets.ldap.read_static_role(name='vaultx-role')\nprint(role_response)\n</code></pre>"},{"location":"usage/secrets_engines/ldap/#list-static-roles","title":"List Static Roles","text":"<p><code>vaultx.api.secrets_engines.LDAP.list_static_roles()</code></p> <p>List all configured roles which allow the retrieval and rotation of an LDAP account. Retrieve and rotate the actual credential via <code>generate_static_credentials()</code>.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nall_static_roles = client.secrets.ldap.list_static_roles()\nprint(all_static_roles)\n</code></pre>"},{"location":"usage/secrets_engines/ldap/#delete-static-role","title":"Delete Static Role","text":"<p><code>vaultx.api.secrets_engines.LDAP.delete_static_role()</code></p> <p>Remove the role configuration which allows the retrieval and rotation of an LDAP account.</p> <p>Note: Passwords are not rotated upon deletion of a static role. The password should be manually rotated prior to deleting the role or revoking access to the static role.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\ndeletion_response = client.secrets.ldap.delete_static_role(name='vaultx-role')\nprint(deletion_response)\n</code></pre>"},{"location":"usage/secrets_engines/ldap/#generate-static-credentials","title":"Generate Static Credentials","text":"<p><code>vaultx.api.secrets_engines.LDAP.generate_static_credentials()</code></p> <p>Retrieve a service account password from LDAP. Return the previous password (if known). Vault shall rotate the password before returning it if it has breached its configured TTL.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\ngen_creds_response = client.secrets.ldap.generate_static_credentials(\n    name='vaultx-role',\n)\nprint('Retrieved Service Account Password: {access} (Current) / {secret} (Old)'.format(\n    access=gen_creds_response['data']['current_password'],\n    secret=gen_creds_response['data']['old_password'],\n))\n</code></pre>"},{"location":"usage/secrets_engines/ldap/#rotate-static-credentials","title":"Rotate Static Credentials","text":"<p><code>vaultx.api.secrets_engines.LDAP.rotate_static_credentials()</code></p> <p>Manually rotate the password of an existing role.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\n# Authenticate to Vault using client.auth.x\n\nrotate_response = client.secrets.ldap.rotate_static_credentials(name='vaultx-role')\nprint(rotate_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/","title":"PKI","text":""},{"location":"usage/secrets_engines/pki/#read-ca-certificate","title":"Read CA Certificate","text":"<p><code>vaultx.api.secrets_engines.PKI.read_ca_certificate()</code></p> <p>Retrieve the current CA certificate.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_ca_certificate_response = client.secrets.pki.read_ca_certificate()\nprint('Current PKI CA Certificate: {}'.format(read_ca_certificate_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#read-ca-certificate-chain","title":"Read CA Certificate Chain","text":"<p><code>vaultx.api.secrets_engines.PKI.read_ca_certificate_chain()</code></p> <p>Retrieve the current CA certificate chain.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_ca_certificate_chain_response = client.secrets.pki.read_ca_certificate_chain()\nprint('Current PKI CA Certificate Chain: {}'.format(read_ca_certificate_chain_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#read-certificate","title":"Read Certificate","text":"<p><code>vaultx.api.secrets_engines.PKI.read_certificate()</code></p> <p>Retrieve a certificate by its serial number.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_certificate_response = client.secrets.pki.read_certificate(serial='crl')\nprint('Current PKI CRL: {}'.format(read_certificate_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#list-certificates","title":"List Certificates","text":"<p><code>vaultx.api.secrets_engines.PKI.list_certificates()</code></p> <p>List all certificates by their serial numbers.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_certificate_response = client.secrets.pki.list_certificates()\nprint('Current certificates (serial numbers): {}'.format(list_certificate_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#submit-ca-information","title":"Submit CA Information","text":"<p><code>vaultx.api.secrets_engines.PKI.submit_ca_information()</code></p> <p>Submit CA information to the PKI secrets engine.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nsubmit_ca_information_response = client.secrets.pki.submit_ca_information(\n    '-----BEGIN RSA PRIVATE KEY-----\\n...\\n-----END CERTIFICATE-----'\n)\nprint(submit_ca_information_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#read-crl-configuration","title":"Read CRL Configuration","text":"<p><code>vaultx.api.secrets_engines.PKI.read_crl_configuration()</code></p> <p>Retrieve the current CRL configuration.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_crl_configuration_response = client.secrets.pki.read_crl_configuration()\nprint('CRL configuration: {}'.format(read_crl_configuration_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#set-crl-configuration","title":"Set CRL Configuration","text":"<p><code>vaultx.api.secrets_engines.PKI.set_crl_configuration()</code></p> <p>Configure the CRL expiration and disable/enable status.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nset_crl_configuration_response = client.secrets.pki.set_crl_configuration(\n    expiry='72h',\n    disable=False\n)\nprint(set_crl_configuration_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#read-urls","title":"Read URLs","text":"<p><code>vaultx.api.secrets_engines.PKI.read_urls()</code></p> <p>Retrieve the current PKI URLs.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_urls_response = client.secrets.pki.read_urls()\nprint('Get PKI URLs: {}'.format(read_urls_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#set-urls","title":"Set URLs","text":"<p><code>vaultx.api.secrets_engines.PKI.set_urls()</code></p> <p>Configure the PKI URLs.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nset_urls_response = client.secrets.pki.set_urls(\n    {\n        'issuing_certificates': ['http://127.0.0.1:8200/v1/pki/ca'],\n        'crl_distribution_points': ['http://127.0.0.1:8200/v1/pki/crl']\n    }\n)\nprint(set_urls_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#read-crl","title":"Read CRL","text":"<p><code>vaultx.api.secrets_engines.PKI.read_crl()</code></p> <p>Retrieve the current Certificate Revocation List (CRL).</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_crl_response = client.secrets.pki.read_crl()\nprint('Current CRL: {}'.format(read_crl_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#rotate-crls","title":"Rotate CRLs","text":"<p><code>vaultx.api.secrets_engines.PKI.rotate_crl()</code></p> <p>Rotate the CRL.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nrotate_crl_response = client.secrets.pki.rotate_crl()\nprint('Rotate CRL: {}'.format(rotate_crl_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#generate-intermediate","title":"Generate Intermediate","text":"<p><code>vaultx.api.secrets_engines.PKI.generate_intermediate()</code></p> <p>Generate an intermediate CA certificate.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ngenerate_intermediate_response = client.secrets.pki.generate_intermediate(\n    type='exported',\n    common_name='Vault integration tests'\n)\nprint('Intermediate certificate: {}'.format(generate_intermediate_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#set-signed-intermediate","title":"Set Signed Intermediate","text":"<p><code>vaultx.api.secrets_engines.PKI.set_signed_intermediate()</code></p> <p>Set a signed intermediate CA certificate.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nset_signed_intermediate_response = client.secrets.pki.set_signed_intermediate(\n    '-----BEGIN CERTIFICATE...'\n)\nprint(set_signed_intermediate_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#generate-certificate","title":"Generate Certificate","text":"<p><code>vaultx.api.secrets_engines.PKI.generate_certificate()</code></p> <p>Generate a certificate using a role.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ngenerate_certificate_response = client.secrets.pki.generate_certificate(\n    name='myrole',\n    common_name='test.example.com'\n)\nprint('Certificate: {}'.format(generate_certificate_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#revoke-certificate","title":"Revoke Certificate","text":"<p><code>vaultx.api.secrets_engines.PKI.revoke_certificate()</code></p> <p>Revoke a certificate by its serial number.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nrevoke_certificate_response = client.secrets.pki.revoke_certificate(\n    serial_number='39:dd:2e...'\n)\nprint('Certificate: {}'.format(revoke_certificate_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#createupdate-role","title":"Create/Update Role","text":"<p><code>vaultx.api.secrets_engines.PKI.create_or_update_role()</code></p> <p>Create or update a role for certificate generation.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ncreate_or_update_role_response = client.secrets.pki.create_or_update_role(\n    'mynewrole',\n    {\n        'ttl': '72h',\n        'allow_localhost': 'false'\n    }\n)\nprint('New role: {}'.format(create_or_update_role_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#read-role","title":"Read Role","text":"<p><code>vaultx.api.secrets_engines.PKI.read_role()</code></p> <p>Retrieve the configuration of a role.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nread_role_response = client.secrets.pki.read_role('myrole')\nprint('Role definition: {}'.format(read_role_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#list-roles","title":"List Roles","text":"<p><code>vaultx.api.secrets_engines.PKI.list_roles()</code></p> <p>List all available roles.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nlist_roles_response = client.secrets.pki.list_roles()\nprint('List of available roles: {}'.format(list_roles_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#delete-role","title":"Delete Role","text":"<p><code>vaultx.api.secrets_engines.PKI.delete_role()</code></p> <p>Delete a role.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ndelete_role_response = client.secrets.pki.delete_role('role2delete')\nprint(delete_role_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#generate-root","title":"Generate Root","text":"<p><code>vaultx.api.secrets_engines.PKI.generate_root()</code></p> <p>Generate a new root CA certificate.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ngenerate_root_response = client.secrets.pki.generate_root(\n    type='exported',\n    common_name='New root CA'\n)\nprint('New root CA: {}'.format(generate_root_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#delete-root","title":"Delete Root","text":"<p><code>vaultx.api.secrets_engines.PKI.delete_root()</code></p> <p>Delete the current root CA certificate.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ndelete_root_response = client.secrets.pki.delete_root()\nprint(delete_root_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#sign-intermediate","title":"Sign Intermediate","text":"<p><code>vaultx.api.secrets_engines.PKI.sign_intermediate()</code></p> <p>Sign an intermediate CA certificate.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nsign_intermediate_response = client.secrets.pki.sign_intermediate(\n    csr='....',\n    common_name='example.com',\n)\nprint('Signed certificate: {}'.format(sign_intermediate_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#sign-self-issued","title":"Sign Self-Issued","text":"<p><code>vaultx.api.secrets_engines.PKI.sign_self_issued()</code></p> <p>Sign a self-issued certificate.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nsign_self_issued_response = client.secrets.pki.sign_self_issued(\n    certificate='...'\n)\nprint('Signed certificate: {}'.format(sign_self_issued_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#sign-certificate","title":"Sign Certificate","text":"<p><code>vaultx.api.secrets_engines.PKI.sign_certificate()</code></p> <p>Sign a certificate using a role.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nsign_certificate_response = client.secrets.pki.sign_certificate(\n    name='myrole',\n    csr='...',\n    common_name='example.com'\n)\nprint('Signed certificate: {}'.format(sign_certificate_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#sign-verbatim","title":"Sign Verbatim","text":"<p><code>vaultx.api.secrets_engines.PKI.sign_verbatim()</code></p> <p>Sign a certificate verbatim.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nsign_verbatim_response = client.secrets.pki.sign_verbatim(\n    name='myrole',\n    csr='...'\n)\nprint('Signed certificate: {}'.format(sign_verbatim_response))\n</code></pre>"},{"location":"usage/secrets_engines/pki/#tidy","title":"Tidy","text":"<p><code>vaultx.api.secrets_engines.PKI.tidy()</code></p> <p>Tidy up the PKI secrets engine.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\ntidy_response = client.secrets.pki.tidy()\nprint(tidy_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#read-issuer","title":"Read Issuer","text":"<p><code>vaultx.api.secrets_engines.PKI.read_issuer()</code></p> <p>Retrieve details of a specific issuer.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nissuer_list_response = client.secrets.pki.list_issuers()\nissuer_read_response = client.secrets.pki.read_issuer(issuer_list_response[\"keys\"][0])\nprint(issuer_read_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#list-issuers","title":"List Issuers","text":"<p><code>vaultx.api.secrets_engines.PKI.list_issuers()</code></p> <p>List all available issuers.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nissuer_list_response = client.secrets.pki.list_issuers()\nprint(issuer_list_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#update-issuer","title":"Update Issuer","text":"<p><code>vaultx.api.secrets_engines.PKI.update_issuer()</code></p> <p>Update an issuer's configuration.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nissuer_list_response = client.secrets.pki.list_issuers()\nissuer_update_response = client.secrets.pki.update_issuer(\n    issuer_list_response[\"keys\"][0],\n    extra_params={'issuer_name': 'my_new_issuer_name'}\n)\nprint(issuer_update_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#revoke-issuer","title":"Revoke Issuer","text":"<p><code>vaultx.api.secrets_engines.PKI.revoke_issuer()</code></p> <p>Revoke an issuer.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nissuer_list_response = client.secrets.pki.list_issuers()\nissuer_revoke_response = client.secrets.pki.revoke_issuer(issuer_list_response[\"keys\"][0])\nprint(issuer_revoke_response)\n</code></pre>"},{"location":"usage/secrets_engines/pki/#delete-issuer","title":"Delete Issuer","text":"<p><code>vaultx.api.secrets_engines.PKI.delete_issuer()</code></p> <p>Delete an issuer.</p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nissuer_list_response = client.secrets.pki.list_issuers()\nissuer_delete_response = client.secrets.pki.delete_issuer(issuer_list_response[\"keys\"][0])\nprint(issuer_delete_response)\n</code></pre>"},{"location":"usage/secrets_engines/transform/","title":"Transform","text":""},{"location":"usage/secrets_engines/transform/#encodedecode-example","title":"Encode/Decode Example","text":"<p><code>vaultx.api.secrets_engines.Transform.encode()</code> <code>vaultx.api.secrets_engines.Transform.decode()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ninput_value = '1111-1111-1111-1111'\n\nrole_name = 'vaultx-role'\ntransformation_name = 'vaultx-fpe-credit-card'\ntransformations = [transformation_name]\n\n# Create a role and a transformation\nclient.secrets.transform.create_or_update_role(\n    name=role_name,\n    transformations=transformations,\n)\nclient.secrets.transform.create_or_update_transformation(\n    name=transformation_name,\n    transform_type='fpe',\n    template='builtin/creditcardnumber',\n    tweak_source='internal',\n    allowed_roles=[role_name],\n)\n\n# Use the role/transformation combination to encode a value\nencode_response = client.secrets.transform.encode(\n    role_name=role_name,\n    value=input_value,\n    transformation=transformation_name,\n)\nprint('The encoded value is: %s' % encode_response['data']['encoded_value'])\n\n# Use the role/transformation combination to decode a value\ndecode_response = client.secrets.transform.decode(\n    role_name=role_name,\n    value=encode_response['data']['encoded_value'],\n    transformation=transformation_name,\n)\nprint('The decoded value is: %s' % decode_response['data']['decoded_value'])\n</code></pre> <p>Output: <pre><code>The encoded value is: ...\nThe decoded value is: 1111-1111-1111-1111\n</code></pre></p>"},{"location":"usage/secrets_engines/transform/#createupdate-role","title":"Create/Update Role","text":"<p><code>vaultx.api.secrets_engines.Transform.create_or_update_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.secrets.transform.create_or_update_role(\n    name='vaultx-role',\n    transformations=[\n        'vaultx-fpe-credit-card',\n    ],\n)\n</code></pre>"},{"location":"usage/secrets_engines/transform/#read-role","title":"Read Role","text":"<p><code>vaultx.api.secrets_engines.Transform.read_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nrole_name = 'vaultx-role'\nclient.secrets.transform.create_or_update_role(\n    name=role_name,\n    transformations=[\n        'vaultx-fpe-credit-card',\n    ],\n)\nread_response = client.secrets.transform.read_role(\n    name=role_name,\n)\nprint('Role \"{}\" has the following transformations configured: {}'.format(\n    role_name,\n    ', '.join(read_response['data']['transformations']),\n))\n</code></pre> <p>Output: <pre><code>Role \"vaultx-role\" has the following transformations configured: vaultx-fpe-credit-card\n</code></pre></p>"},{"location":"usage/secrets_engines/transform/#list-roles","title":"List Roles","text":"<p><code>vaultx.api.secrets_engines.Transform.list_roles()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.secrets.transform.create_or_update_role(\n    name='vaultx-role',\n    transformations=[\n        'vaultx-fpe-credit-card',\n    ],\n)\nlist_response = client.secrets.transform.list_roles()\nprint('List of transform role names: {}'.format(\n    ', '.join(list_response['data']['keys']),\n))\n</code></pre> <p>Output: <pre><code>List of transform role names: vaultx-role\n</code></pre></p>"},{"location":"usage/secrets_engines/transform/#delete-role","title":"Delete Role","text":"<p><code>vaultx.api.secrets_engines.Transform.delete_role()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nrole_name = 'vaultx-role'\n\n# Create a role\nclient.secrets.transform.create_or_update_role(\n    name=role_name,\n    transformations=[\n        'vaultx-fpe-credit-card',\n    ],\n)\n\n# Subsequently delete it...\nclient.secrets.transform.delete_role(\n    name=role_name,\n)\n</code></pre>"},{"location":"usage/secrets_engines/transform/#createupdate-transformation","title":"Create/Update Transformation","text":"<p><code>vaultx.api.secrets_engines.Transform.create_or_update_transformation()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntransformation_name = 'vaultx-fpe-credit-card'\ntemplate = 'builtin/creditcardnumber'\nclient.secrets.transform.create_or_update_transformation(\n    name=transformation_name,\n    transform_type='fpe',\n    template=template,\n    tweak_source='internal',\n    allowed_roles=[\n        'test-role'\n    ],\n)\n</code></pre>"},{"location":"usage/secrets_engines/transform/#read-transformation","title":"Read Transformation","text":"<p><code>vaultx.api.secrets_engines.Transform.read_transformation()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntransformation_name = 'vaultx-fpe-credit-card'\ntemplate = 'builtin/creditcardnumber'\nclient.secrets.transform.create_or_update_transformation(\n    name=transformation_name,\n    transform_type='fpe',\n    template=template,\n    tweak_source='internal',\n    allowed_roles=[\n        'vaultx-role'\n    ],\n)\nread_response = client.secrets.transform.read_transformation(\n    name=transformation_name,\n)\nprint('Transformation \"{}\" has the following type configured: {}'.format(\n    transformation_name,\n    read_response['data']['type'],\n))\n</code></pre> <p>Output: <pre><code>Transformation \"vaultx-fpe-credit-card\" has the following type configured: fpe\n</code></pre></p>"},{"location":"usage/secrets_engines/transform/#list-transformations","title":"List Transformations","text":"<p><code>vaultx.api.secrets_engines.Transform.list_transformations()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntransformation_name = 'vaultx-fpe-credit-card'\ntemplate = 'builtin/creditcardnumber'\nclient.secrets.transform.create_or_update_transformation(\n    name=transformation_name,\n    transform_type='fpe',\n    template=template,\n    tweak_source='internal',\n    allowed_roles=[\n        'vaultx-role'\n    ],\n)\nlist_response = client.secrets.transform.list_transformations()\nprint('List of transformations: {}'.format(\n    ', '.join(list_response['data']['keys']),\n))\n</code></pre> <p>Output: <pre><code>List of transformations: vaultx-fpe-credit-card\n</code></pre></p>"},{"location":"usage/secrets_engines/transform/#delete-transformation","title":"Delete Transformation","text":"<p><code>vaultx.api.secrets_engines.Transform.delete_transformation()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntransformation_name = 'vaultx-fpe-credit-card'\ntemplate = 'builtin/creditcardnumber'\n\n# Create a transformation\nclient.secrets.transform.create_or_update_transformation(\n    name=transformation_name,\n    transform_type='fpe',\n    template=template,\n    tweak_source='internal',\n    allowed_roles=[\n        'vaultx-role'\n    ],\n)\n\n# Subsequently delete it...\nclient.secrets.transform.delete_transformation(\n    name=transformation_name,\n)\n</code></pre>"},{"location":"usage/secrets_engines/transform/#createupdate-template","title":"Create/Update Template","text":"<p><code>vaultx.api.secrets_engines.Transform.create_or_update_template()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntemplate_name = 'vaultx-template'\ncreate_response = client.secrets.transform.create_or_update_template(\n    name=template_name,\n    template_type='regex',\n    pattern='(\\\\d{9})',\n    alphabet='builtin/numeric',\n)\nprint(create_response)\n</code></pre>"},{"location":"usage/secrets_engines/transform/#read-template","title":"Read Template","text":"<p><code>vaultx.api.secrets_engines.Transform.read_template()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntemplate_name = 'vaultx-template'\nclient.secrets.transform.create_or_update_template(\n    name=template_name,\n    template_type='regex',\n    pattern='(\\\\d{9})',\n    alphabet='builtin/numeric',\n)\nread_response = client.secrets.transform.read_template(\n    name=template_name,\n)\nprint('Template \"{}\" has the following type configured: {}'.format(\n    template_name,\n    read_response['data']['type'],\n))\n</code></pre> <p>Output: <pre><code>Template \"vaultx-template\" has the following type configured: regex\n</code></pre></p>"},{"location":"usage/secrets_engines/transform/#list-templates","title":"List Templates","text":"<p><code>vaultx.api.secrets_engines.Transform.list_templates()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntemplate_name = 'vaultx-template'\nclient.secrets.transform.create_or_update_template(\n    name=template_name,\n    template_type='regex',\n    pattern='(\\\\d{9})',\n    alphabet='builtin/numeric',\n)\nlist_response = client.secrets.transform.list_templates()\nprint('List of templates: {}'.format(\n    ', '.join(list_response['data']['keys']),\n))\n</code></pre> <p>Output: <pre><code>List of templates: builtin/creditcardnumber, builtin/socialsecuritynumber, vaultx-template\n</code></pre></p>"},{"location":"usage/secrets_engines/transform/#delete-template","title":"Delete Template","text":"<p><code>vaultx.api.secrets_engines.Transform.delete_template()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ntemplate_name = 'vaultx-template'\nclient.secrets.transform.create_or_update_template(\n    name=template_name,\n    template_type='regex',\n    pattern='(\\\\d{9})',\n    alphabet='builtin/numeric',\n)\n\n# Subsequently delete it...\nclient.secrets.transform.delete_template(\n    name=template_name,\n)\n</code></pre>"},{"location":"usage/secrets_engines/transform/#createupdate-alphabet","title":"Create/Update Alphabet","text":"<p><code>vaultx.api.secrets_engines.Transform.create_or_update_alphabet()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nalphabet_name = 'vaultx-alphabet'\nalphabet_value = 'abc'\nclient.secrets.transform.create_or_update_alphabet(\n    name=alphabet_name,\n    alphabet=alphabet_value,\n)\n</code></pre>"},{"location":"usage/secrets_engines/transform/#read-alphabet","title":"Read Alphabet","text":"<p><code>vaultx.api.secrets_engines.Transform.read_alphabet()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nalphabet_name = 'vaultx-alphabet'\nalphabet_value = 'abc'\nclient.secrets.transform.create_or_update_alphabet(\n    name=alphabet_name,\n    alphabet=alphabet_value,\n)\nread_response = client.secrets.transform.read_alphabet(\n    name=alphabet_name,\n)\nprint('Alphabet \"{}\" has this jazz: {}'.format(\n    alphabet_name,\n    read_response['data']['alphabet'],\n))\n</code></pre> <p>Output: <pre><code>Alphabet \"vaultx-alphabet\" has this jazz: abc\n</code></pre></p>"},{"location":"usage/secrets_engines/transform/#list-alphabets","title":"List Alphabets","text":"<p><code>vaultx.api.secrets_engines.Transform.list_alphabets()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nalphabet_name = 'vaultx-alphabet'\nalphabet_value = 'abc'\nclient.secrets.transform.create_or_update_alphabet(\n    name=alphabet_name,\n    alphabet=alphabet_value,\n)\nlist_response = client.secrets.transform.list_alphabets()\nprint('List of alphabets: {}'.format(\n    ', '.join(list_response['data']['keys']),\n))\n</code></pre> <p>Output: <pre><code>List of alphabets: builtin/alphalower, ..., vaultx-alphabet\n</code></pre></p>"},{"location":"usage/secrets_engines/transform/#delete-alphabet","title":"Delete Alphabet","text":"<p><code>vaultx.api.secrets_engines.Transform.delete_alphabet()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nalphabet_name = 'vaultx-alphabet'\nalphabet_value = 'abc'\n\n# Create an alphabet\nclient.secrets.transform.create_or_update_alphabet(\n    name=alphabet_name,\n    alphabet=alphabet_value,\n)\n\n# Subsequently delete it...\nclient.secrets.transform.delete_alphabet(\n    name=alphabet_name,\n)\n</code></pre>"},{"location":"usage/secrets_engines/transit/","title":"Transit","text":""},{"location":"usage/secrets_engines/transit/#create-key","title":"Create Key","text":"<p><code>vaultx.api.secrets_engines.Transit.create_key()</code></p> <p>Create a new named encryption key of the specified type.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.secrets.transit.create_key(name='vaultx-key')\n</code></pre>"},{"location":"usage/secrets_engines/transit/#read-key","title":"Read Key","text":"<p><code>vaultx.api.secrets_engines.Transit.read_key()</code></p> <p>Read information about a named encryption key.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nread_key_response = client.secrets.transit.read_key(name='vaultx-key')\nlatest_version = read_key_response['data']['latest_version']\nprint('Latest version for key \"vaultx-key\" is: {ver}'.format(ver=latest_version))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#list-keys","title":"List Keys","text":"<p><code>vaultx.api.secrets_engines.Transit.list_keys()</code></p> <p>List all keys (if there are any).</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nlist_keys_response = client.secrets.transit.list_keys()\nkeys = list_keys_response['data']['keys']\nprint('Currently configured keys: {keys}'.format(keys=keys))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#delete-key","title":"Delete Key","text":"<p><code>vaultx.api.secrets_engines.Transit.delete_key()</code></p> <p>Delete a named encryption key.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nkey_name = 'gonna-delete-this-key'\n\nclient.secrets.transit.create_key(name=key_name)\n\n# Update key to allow deletion\nclient.secrets.transit.update_key_configuration(\n    name=key_name,\n    deletion_allowed=True,\n)\n\n# Delete the key\nclient.secrets.transit.delete_key(name=key_name)\n</code></pre>"},{"location":"usage/secrets_engines/transit/#update-key-configuration","title":"Update Key Configuration","text":"<p><code>vaultx.api.secrets_engines.Transit.update_key_configuration()</code></p> <p>Tune configuration values for a given key.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.secrets.transit.update_key_configuration(\n    name='vaultx-key',\n    exportable=True,\n)\n</code></pre>"},{"location":"usage/secrets_engines/transit/#rotate-key","title":"Rotate Key","text":"<p><code>vaultx.api.secrets_engines.Transit.rotate_key()</code></p> <p>Rotate the version of the named key.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.secrets.transit.rotate_key(name='vaultx-key')\n</code></pre>"},{"location":"usage/secrets_engines/transit/#export-key","title":"Export Key","text":"<p><code>vaultx.api.secrets_engines.Transit.export_key()</code></p> <p>Return the named key.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nexport_key_response = client.secrets.transit.export_key(\n    name='vaultx-key',\n    key_type='hmac-key',\n)\nprint('Exported keys: %s' % export_key_response['data']['keys'])\n</code></pre>"},{"location":"usage/secrets_engines/transit/#encrypt-data","title":"Encrypt Data","text":"<p><code>vaultx.api.secrets_engines.Transit.encrypt_data()</code></p> <p>Encrypt the provided plaintext using the named key.</p> <pre><code>import base64\nimport vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nencrypt_data_response = client.secrets.transit.encrypt_data(\n    name='vaultx-key',\n    plaintext=base64.b64encode('hi its me vaultx'.encode()).decode(),\n)\nciphertext = encrypt_data_response['data']['ciphertext']\nprint('Encrypted plaintext ciphertext is: {cipher}'.format(cipher=ciphertext))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#decrypt-data","title":"Decrypt Data","text":"<p><code>vaultx.api.secrets_engines.Transit.decrypt_data()</code></p> <p>Decrypt the provided ciphertext using the named key.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ndecrypt_data_response = client.secrets.transit.decrypt_data(\n    name='vaultx-key',\n    ciphertext=ciphertext,\n)\nplaintext = decrypt_data_response['data']['plaintext']\nprint('Decrypted plaintext is: {text}'.format(text=plaintext))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#rewrap-data","title":"Rewrap Data","text":"<p><code>vaultx.api.secrets_engines.Transit.rewrap_data()</code></p> <p>Rewrap the provided ciphertext using the latest version of the named key.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nrewrap_data_response = client.secrets.transit.rewrap_data(\n    name='vaultx-key',\n    ciphertext=ciphertext,\n)\nrewrapped_ciphertext = rewrap_data_response['data']['ciphertext']\nprint('Rewrapped ciphertext is: {cipher}'.format(cipher=rewrapped_ciphertext))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#generate-data-key","title":"Generate Data Key","text":"<p><code>vaultx.api.secrets_engines.Transit.generate_data_key()</code></p> <p>Generate a new high-entropy key and the value encrypted with the named key.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ngen_key_response = client.secrets.transit.generate_data_key(\n    name='vaultx-key',\n    key_type='plaintext',\n)\nciphertext = gen_key_response['data']['ciphertext']\nprint('Generated data key ciphertext is: {cipher}'.format(cipher=ciphertext))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#generate-random-bytes","title":"Generate Random Bytes","text":"<p><code>vaultx.api.secrets_engines.Transit.generate_random_bytes()</code></p> <p>Return high-quality random bytes of the specified length.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ngen_bytes_response = client.secrets.transit.generate_random_bytes(n_bytes=32)\nrandom_bytes = gen_bytes_response['data']['random_bytes']\nprint('Here are some random bytes: {bytes}'.format(bytes=random_bytes))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#hash-data","title":"Hash Data","text":"<p><code>vaultx.api.secrets_engines.Transit.hash_data()</code></p> <p>Return the cryptographic hash of given data using the specified algorithm.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nhash_data_response = client.secrets.transit.hash_data(\n    hash_input=base64.b64encode('hi its me vaultx'.encode()).decode(),\n    algorithm='sha2-256',\n)\nsum = hash_data_response['data']['sum']\nprint('Hashed data is: {sum}'.format(sum=sum))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#generate-hmac","title":"Generate HMAC","text":"<p><code>vaultx.api.secrets_engines.Transit.generate_hmac()</code></p> <p>Return the digest of given data using the specified hash algorithm and the named key.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ngenerate_hmac_response = client.secrets.transit.generate_hmac(\n    name='vaultx-key',\n    hash_input=base64.b64encode('hi its me vaultx'.encode()).decode(),\n    algorithm='sha2-256',\n)\nhmac = generate_hmac_response['data']\nprint(\"HMAC'd data is: {hmac}\".format(hmac=hmac))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#sign-data","title":"Sign Data","text":"<p><code>vaultx.api.secrets_engines.Transit.sign_data()</code></p> <p>Return the cryptographic signature of the given data using the named key and the specified hash algorithm.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nsign_data_response = client.secrets.transit.sign_data(\n    name='vaultx-signing-key',\n    hash_input=base64.b64encode('hi its me vaultx'.encode()).decode(),\n)\nsignature = sign_data_response['data']['signature']\nprint('Signature is: {signature}'.format(signature=signature))\n</code></pre>"},{"location":"usage/secrets_engines/transit/#verify-signed-data","title":"Verify Signed Data","text":"<p><code>vaultx.api.secrets_engines.Transit.verify_signed_data()</code></p> <p>Return whether the provided signature is valid for the given data.</p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nverify_signed_data_response = client.secrets.transit.verify_signed_data(\n    name='vaultx-signing-key',\n    hash_input=base64.b64encode('hi its me vaultx'.encode()).decode(),\n    signature=signature,\n)\nvalid = verify_signed_data_response['data']['valid']\nprint('Signature is valid?: {valid}'.format(valid=valid))\n</code></pre>"},{"location":"usage/system_backend/audit/","title":"Audit","text":""},{"location":"usage/system_backend/audit/#list-enabled-audit-devices","title":"List Enabled Audit Devices","text":"<p><code>vaultx.api.system_backend.Audit.list_enabled_audit_devices()</code></p> <pre><code>audit_devices = client.sys.list_enabled_audit_devices()\n\noptions = {\n    'path': '/tmp/vault.log',\n    'log_raw': True,\n}\n\nclient.sys.enable_audit_device('file', options=options, path='somefile')\nclient.sys.disable_audit_device('oldfile')\n</code></pre> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nenabled_audit_devices = client.sys.list_enabled_audit_devices()\naudit_devices_list = ', '.join(enabled_audit_devices['data'].keys())\nprint(f'The following audit devices are enabled: {audit_devices_list}')\n</code></pre>"},{"location":"usage/system_backend/audit/#disable-audit-device","title":"Disable Audit Device","text":"<p><code>vaultx.api.system_backend.Audit.disable_audit_device()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.disable_audit_device(\n    path='tmp-file-audit',\n)\n</code></pre>"},{"location":"usage/system_backend/audit/#calculate-hash","title":"Calculate hash","text":"<p><code>vaultx.api.system_backend.Audit.calculate_hash()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ninput_to_hash = 'some sort of string thinger'\n\naudit_hash = client.sys.calculate_hash(\n    path='tmp-file-audit',\n    input_to_hash=input_to_hash,\n)\n\nprint(f'The hash for the provided input is: {audit_hash['data']['hash']}')\n</code></pre>"},{"location":"usage/system_backend/auth/","title":"Auth","text":""},{"location":"usage/system_backend/auth/#list-auth-methods","title":"List Auth Methods","text":"<p><code>vaultx.api.system_backend.Auth.list_auth_methods()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nauth_methods = client.sys.list_auth_methods()\nauth_methods_list = ', '.join(auth_methods['data'].keys())\nprint(f'The following auth methods are enabled: {auth_methods_list}')\n</code></pre>"},{"location":"usage/system_backend/auth/#enable-auth-method","title":"Enable Auth Method","text":"<p><code>vaultx.api.system_backend.Auth.list_auth_methods()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.enable_auth_method(\n    method_type='github',\n    path='github-vaultx',\n)\n</code></pre>"},{"location":"usage/system_backend/auth/#disable-auth-method","title":"Disable Auth Method","text":"<p><code>vaultx.api.system_backend.Auth.disable_auth_method()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.disable_auth_method(\n    path='github-vaultx',\n)\n</code></pre>"},{"location":"usage/system_backend/auth/#read-auth-method-tuning","title":"Read Auth Method Tuning","text":"<p><code>vaultx.api.system_backend.Auth.read_auth_method_tuning()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\nresponse = client.sys.read_auth_method_tuning(\n    path='github-vaultx',\n)\n\nmax_ttl = response['data']['max_lease_ttl']\nprint(f'The max lease TTL for the auth method under path \"github-vaultx\" is: {max_ttl}')\n</code></pre>"},{"location":"usage/system_backend/auth/#tune-auth-method","title":"Tune Auth Method","text":"<p><code>vaultx.api.system_backend.Auth.tune_auth_method()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.tune_auth_method(\n    path='github-vaultx',\n    description='The Github auth method for vaultx users',\n)\n</code></pre>"},{"location":"usage/system_backend/capabilities/","title":"Capabilities","text":""},{"location":"usage/system_backend/capabilities/#get-capabilities","title":"Get Capabilities","text":"<p><code>vaultx.api.system_backend.Capabilities.get_capabilities()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200', token=\"TOKEN\")\n\ncapabilities = client.sys.get_capabilities(paths=[\"path1\", \"path2\"])\nprint(f'Vault capabilities are: {capabilities}')\n</code></pre>"},{"location":"usage/system_backend/health/","title":"Health","text":""},{"location":"usage/system_backend/health/#read-status","title":"Read Status","text":"<p><code>vaultx.api.system_backend.Health.read_health_status()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nstatus = client.sys.read_health_status(method='GET')\nprint(f'Vault initialization status is: {status['initialized']}')\n</code></pre>"},{"location":"usage/system_backend/init/","title":"Init","text":""},{"location":"usage/system_backend/init/#read-status","title":"Read Status","text":"<p><code>vaultx.api.system_backend.Init.read_init_status()</code></p> <pre><code>import vaultx\n\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nread_response = client.sys.read_init_status()\nprint(f'Vault initialize status: {read_response['initialized']}')\n</code></pre>"},{"location":"usage/system_backend/init/#is-initialized","title":"Is Initialized","text":"<pre><code>import vaultx\n\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nprint(f'Vault initialize status: {client.sys.is_initialized()}')\n</code></pre>"},{"location":"usage/system_backend/init/#initialize","title":"Initialize","text":"<pre><code>import vaultx\n\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ninit_result = client.sys.initialize()\n\nroot_token = init_result['root_token']\nunseal_keys = init_result['keys']\n</code></pre> <p>When called for a previously initialized Vault cluster, an exception with 400 status code is raised:</p> <pre><code>import vaultx\n\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\ninit_result = client.sys.initialize()\n</code></pre>"},{"location":"usage/system_backend/key/","title":"Key","text":""},{"location":"usage/system_backend/key/#read-root-generation-progress","title":"Read Root Generation Progress","text":"<p><code>vaultx.api.system_backend.Key.read_root_generation_progress()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nroot_gen_progress = client.sys.read_root_generation_progress()\nprint(f'Root generation \"started\" status: {root_gen_progress['started']}')\n</code></pre>"},{"location":"usage/system_backend/key/#start-root-token-generation","title":"Start Root Token Generation","text":"<p><code>vaultx.api.system_backend.Key.start_root_token_generation()</code></p> <pre><code>import vaultx\nfrom tests.utils import get_generate_root_otp\n\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nnew_otp = get_generate_root_otp()\nstart_generate_root_response = client.sys.start_root_token_generation(\n    otp=new_otp,\n)\nnonce = start_generate_root_response['nonce']\nprint(f'Nonce for root generation is: {nonce}')\n</code></pre>"},{"location":"usage/system_backend/key/#cancel-root-generation","title":"Cancel Root Generation","text":"<p><code>vaultx.api.system_backend.Key.cancel_root_generation()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.cancel_root_generation()\n</code></pre>"},{"location":"usage/system_backend/key/#generate-root","title":"Generate Root","text":"<p><code>vaultx.api.system_backend.Key.generate_root()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.generate_root(\n    key=key,\n    nonce=nonce,\n)\n</code></pre>"},{"location":"usage/system_backend/key/#get-encryption-key-status","title":"Get Encryption Key Status","text":"<p><code>vaultx.api.system_backend.Key.key_status()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nprint(f'Encryption key term is: {client.key_status['term']}')\n</code></pre>"},{"location":"usage/system_backend/key/#rotate-encryption-key","title":"Rotate Encryption Key","text":"<p><code>vaultx.api.system_backend.Key.rotate_encryption_key()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.rotate_encryption_key()\n</code></pre>"},{"location":"usage/system_backend/key/#read-rekey-progress","title":"Read Rekey Progress","text":"<p><code>vaultx.api.system_backend.Key.read_rekey_progress()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nprint(f'Rekey \"started\" status is: {client.sys.read_rekey_progress()['started']}')\n</code></pre>"},{"location":"usage/system_backend/key/#start-rekey","title":"Start Rekey","text":"<p><code>vaultx.api.system_backend.Key.start_rekey()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nrekey_response = client.sys.start_rekey()\nnonce = rekey_response['nonce']\nprint(f'Nonce for rekey is: {nonce}')\n</code></pre>"},{"location":"usage/system_backend/key/#cancel-rekey","title":"Cancel Rekey","text":"<p><code>vaultx.api.system_backend.Key.cancel_rekey()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.cancel_rekey()\n</code></pre>"},{"location":"usage/system_backend/key/#rekey","title":"Rekey","text":"<p><code>vaultx.api.system_backend.Key.rekey()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.rekey(\n    key=key,\n    nonce=nonce,\n)\n</code></pre>"},{"location":"usage/system_backend/key/#rekey-multi","title":"Rekey Multi","text":"<p><code>vaultx.api.system_backend.Key.rekey_multi()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.rekey_multi(\n    keys,\n    nonce=nonce,\n)\n</code></pre>"},{"location":"usage/system_backend/key/#read-rekey-verify-progress","title":"Read Rekey Verify Progress","text":"<p><code>vaultx.api.system_backend.Key.read_rekey_verify_progress()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nresponse = client.sys.read_rekey_verify_progress()\n\nprint(\n    'Rekey verify progress is %d out of %d' % (\n        response['progress'],\n        response['t'],\n    )\n)\n</code></pre>"},{"location":"usage/system_backend/key/#cancel-rekey-verify","title":"Cancel Rekey Verify","text":"<p><code>vaultx.api.system_backend.Key.cancel_rekey_verify()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.cancel_rekey_verify()\n</code></pre>"},{"location":"usage/system_backend/key/#rekey-verify","title":"Rekey Verify","text":"<p><code>vaultx.api.system_backend.Key.rekey_verify()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.rekey_verify(\n    key,\n    nonce=verify_nonce,\n)\n</code></pre>"},{"location":"usage/system_backend/key/#rekey-verify-multi","title":"Rekey Verify Multi","text":"<p><code>vaultx.api.system_backend.Key.rekey_verify_multi()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.rekey_verify_multi(\n    keys,\n    nonce=verify_nonce,\n)\n</code></pre>"},{"location":"usage/system_backend/key/#read-backup-keys","title":"Read Backup Keys","text":"<p><code>vaultx.api.system_backend.Key.read_backup_keys()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\nrekey_response = client.sys.start_rekey(\n    secret_shares=1,\n    secret_threshold=1,\n    pgp_keys=pgp_keys,\n    backup=True,\n)\nnonce = rekey_response['nonce']\n\nclient.sys.rekey_multi(\n    keys,\n    nonce=nonce,\n)\n\nprint(f'Backup keys are: {client.sys.read_backup_keys()['data']['keys']}')\n</code></pre>"},{"location":"usage/system_backend/leader/","title":"Leader","text":""},{"location":"usage/system_backend/leader/#read-leader-status","title":"Read Leader Status","text":"<p><code>vaultx.api.systm_backend.Leader.read_leader_status()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nstatus = client.sys.read_leader_status()\nprint(f'HA status is: {status['ha_enabled']}')\n</code></pre>"},{"location":"usage/system_backend/leader/#step-down","title":"Step Down","text":"<p><code>vaultx.api.systm_backend.Leader.step_down()</code></p> <pre><code>import vaultx\n\nclient = vaultx.Client(url='https://127.0.0.1:8200')\nclient.sys.step_down()\n</code></pre>"},{"location":"usage/system_backend/lease/","title":"Lease","text":""},{"location":"usage/system_backend/lease/#read-lease","title":"Read Lease","text":"<p><code>vaultx.api.system_backend.Lease.read_lease()</code></p> <pre><code>read_lease_response = client.sys.read_lease(lease_id=lease_id)\n\nprint(f'Expire time for lease ID {lease_id} is: {read_lease_response['data']['expire_time']}')\n</code></pre>"},{"location":"usage/system_backend/lease/#list-leases","title":"List Leases","text":"<p><code>vaultx.api.system_backend.Lease.list_leases()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nlist_leases_response = client.sys.list_leases(\n    prefix='pki',\n)\nprint(f'The follow lease keys are active under the \"pki\" prefix: {list_leases_response['data']['keys']}')\n</code></pre>"},{"location":"usage/system_backend/lease/#renew-lease","title":"Renew Lease","text":"<p><code>vaultx.api.system_backend.Lease.renew_lease()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.renew_lease(\n    lease_id=lease_id,\n    increment=500,\n)\n</code></pre>"},{"location":"usage/system_backend/lease/#revoke-lease","title":"Revoke Lease","text":"<p><code>vaultx.api.system_backend.Lease.revoke_lease()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.revoke_lease(\n    lease_id=lease_id,\n)\n</code></pre>"},{"location":"usage/system_backend/lease/#revoke-prefix","title":"Revoke Prefix","text":"<p><code>vaultx.api.system_backend.Lease.revoke_prefix()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.revoke_prefix(\n    prefix='pki',\n)\n</code></pre>"},{"location":"usage/system_backend/lease/#revoke-force","title":"Revoke Force","text":"<p><code>vaultx.api.system_backend.Lease.revoke_force()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.revoke_force(\n    prefix='pki',\n)\n</code></pre>"},{"location":"usage/system_backend/mount/","title":"Mount","text":""},{"location":"usage/system_backend/mount/#list-mounted-secrets-engines","title":"List Mounted Secrets Engines","text":"<p><code>vautlx.api.system_backend.Mount.list_mounted_secrets_engines()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nsecrets_engines_list = client.sys.list_mounted_secrets_engines()['data']\nprint('The following secrets engines are mounted: %s' % ', '.join(sorted(secrets_engines_list.keys())))\n</code></pre>"},{"location":"usage/system_backend/mount/#enable-secrets-engines","title":"Enable Secrets Engines","text":"<p><code>vautlx.api.system_backend.Mount.enable_secrets_engine()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.enable_secrets_engine(\n    backend_type='kv',\n    path='vaultx-kv',\n)\n</code></pre>"},{"location":"usage/system_backend/mount/#disable-secrets-engines","title":"Disable Secrets Engines","text":"<p><code>vautlx.api.system_backend.Mount.disable_secrets_engine()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.disable_secrets_engine(\n    path='vaultx-kv',\n)\n</code></pre>"},{"location":"usage/system_backend/mount/#read-mount-configuration","title":"Read Mount Configuration","text":"<p><code>vautlx.api.system_backend.Mount.read_mount_configuration()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nsecret_backend_tuning = client.sys.read_mount_configuration(path='vaultx-kv')\nprint('The max lease TTL for the \"vaultx-kv\" backend is: {max_lease_ttl}'.format(\n    max_lease_ttl=secret_backend_tuning['data']['max_lease_ttl'],\n ))\n</code></pre>"},{"location":"usage/system_backend/mount/#tune-mount-configuration","title":"Tune Mount Configuration","text":"<p><code>vautlx.api.system_backend.Mount.tune_mount_configuration()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.tune_mount_configuration(\n    path='vaultx-kv',\n    default_lease_ttl='3600s',\n    max_lease_ttl='8600s',\n)\n</code></pre>"},{"location":"usage/system_backend/mount/#move-backend","title":"Move Backend","text":"<p><code>vautlx.api.system_backend.Mount.move_backend()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.move_backend(\n    from_path='vaultx-kv',\n    to_path='kv-vaultx',\n)\n</code></pre>"},{"location":"usage/system_backend/namespace/","title":"Namespace","text":""},{"location":"usage/system_backend/namespace/#create-namespace","title":"Create Namespace","text":"<p><code>vaultx.api.system_backend.Namespace.create_namespace</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\n# Create namespace team1 where team1 is a child of root\nclient.sys.create_namespace(path=\"team1\")\n\n# Create namespace team1/app1 where app1 is a child of team1\nclient2 = vaultx.Client(url='https://127.0.0.1:8200', namespace=\"team1\")\nclient2.sys.create_namespace(path=\"app1\")\n</code></pre>"},{"location":"usage/system_backend/namespace/#list-namespaces","title":"List Namespaces","text":"<p><code>vaultx.api.system_backend.Namespace.list_namespaces</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\nclient.sys.create_namespace(path='test_name_space')\n\nclient.sys.list_namespaces()\n</code></pre>"},{"location":"usage/system_backend/namespace/#delete-namespace","title":"Delete Namespace","text":"<p><code>vaultx.api.system_backend.Namespace.delete_namespace</code></p> <pre><code>import vaultx\n\n# Delete namespace app1 where app1 is a child of team1\nclient2 = vaultx.Client(url='https://127.0.0.1:8200', namespace=\"team1\")\nclient2.sys.delete_namespace(path=\"app1\")\n\n# Delete namespace team1\nclient = vaultx.Client(url='https://127.0.0.1:8200')\nclient.sys.delete_namespace(path=\"team1\")\n</code></pre>"},{"location":"usage/system_backend/policies/","title":"Policies","text":""},{"location":"usage/system_backend/policies/#create-or-update-acl-policy","title":"Create or Update ACL Policy","text":"<p><code>vaultx.api.system_backend.Policies.create_or_update_acl_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\n\n# Create ACL Policy\nclient.sys.create_or_update_acl_policy(\n        name=\"test-acl-policy\", policy='path \"sys/health\" { capabilities = [\"read\", \"sudo\"]}',\n    )\n\n# Update ACL Policy\nclient.sys.create_or_update_acl_policy(\n        name=\"test-acl-policy\", policy='path \"sys/health\" { capabilities = [\"read\"]}',\n    )\n</code></pre>"},{"location":"usage/system_backend/policies/#read-acl-policy","title":"Read ACL Policy","text":"<p><code>vaultx.api.system_backend.Policies.read_acl_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\n\n# Create ACL Policy\nclient.sys.create_or_update_acl_policy(\n        name=\"test-acl-policy\", policy='path \"sys/health\" { capabilities = [\"read\", \"sudo\"]}',\n    )\n\nclient.sys.read_acl_policy(\"test-acl-policy\")\n</code></pre>"},{"location":"usage/system_backend/policies/#list-acl-policies","title":"List ACL Policies","text":"<p><code>vaultx.api.system_backend.Policies.list_acl_policies()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\n\nclient.sys.create_or_update_acl_policy(\n        name=\"test-acl-policy\", policy='path \"sys/health\" { capabilities = [\"read\"]}',\n    )\nclient.sys.list_acl_policies()\n</code></pre>"},{"location":"usage/system_backend/policies/#delete-acl-policy","title":"Delete ACL Policy","text":"<p><code>vaultx.api.system_backend.Policies.delete_acl_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\nclient.sys.delete_acl_policy(\"test-acl-policy\")\n</code></pre>"},{"location":"usage/system_backend/policies/#create-or-update-rgp-policy","title":"Create or Update RGP Policy","text":"<p><code>vaultx.api.system_backend.Policies.create_or_update_rgp_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\n\npolicy = \"\"\"import \"time\"\nimport \"strings\"\n\nmain = rule when not strings.has_prefix(request.path, \"auth/ldap/login\") {\n    time.load(token.creation_time).unix &gt; time.load(\"2017-09-17T13:25:29Z\").unix\n}\n\"\"\"\n\n# Create RGP Policy\nclient.sys.create_or_update_rgp_policy(\n        name=\"test-rgp-policy\", policy=policy, enforcement_level=\"soft-mandatory\"\n    )\n\n# Update RGP Policy\nclient.sys.create_or_update_rgp_policy(\n        name=\"test-rgp-policy\", policy=policy, enforcement_level=\"hard-mandatory\",\n    )\n</code></pre>"},{"location":"usage/system_backend/policies/#read-rgp-policy","title":"Read RGP Policy","text":"<p><code>vaultx.api.system_backend.Policies.read_rgp_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\n\npolicy = \"\"\"import \"time\"\nimport \"strings\"\n\nmain = rule when not strings.has_prefix(request.path, \"auth/ldap/login\") {\n    time.load(token.creation_time).unix &gt; time.load(\"2017-09-17T13:25:29Z\").unix\n}\n\"\"\"\n\nclient.sys.create_or_update_rgp_policy(\n    name=\"test-rgp-policy\", policy=policy, enforcement_level=\"soft-mandatory\"\n)\n\nclient.sys.read_rgp_policy(\"test-rgp-policy\")\n</code></pre>"},{"location":"usage/system_backend/policies/#list-rgp-policies","title":"List RGP Policies","text":"<p><code>vaultx.api.system_backend.Policies.list_rgp_policies()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\n\npolicy = \"\"\"import \"time\"\nimport \"strings\"\n\nmain = rule when not strings.has_prefix(request.path, \"auth/ldap/login\") {\n    time.load(token.creation_time).unix &gt; time.load(\"2017-09-17T13:25:29Z\").unix\n}\n\"\"\"\n\nclient.sys.create_or_update_rgp_policy(\n        name=\"test-rgp-policy\", policy=policy, enforcement_level=\"soft-mandatory\"\n    )\nclient.sys.list_rgp_policies()\n</code></pre>"},{"location":"usage/system_backend/policies/#delete-rgp-policy","title":"Delete RGP Policy","text":"<p><code>vaultx.api.system_backend.Policies.delte_rgp_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\nclient.sys.delete_rgp_policy(\"test-rgp-policy\")\n</code></pre>"},{"location":"usage/system_backend/policies/#create-or-update-egp-policy","title":"Create or Update EGP Policy","text":"<p><code>vaultx.api.system_backend.Policies.create_or_update_egp_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\n\npolicy = \"\"\"import \"time\"\nimport \"strings\"\n\nmain = rule when not strings.has_prefix(request.path, \"auth/ldap/login\") {\n    time.load(token.creation_time).unix &gt; time.load(\"2017-09-17T13:25:29Z\").unix\n}\n\"\"\"\n\n# Create EGP Policy\nclient.sys.create_or_update_egp_policy(\n        name=\"test-egp-policy\", policy=policy, enforcement_level=\"soft-mandatory\", paths=[\"/test\"]\n    )\n\n# Update EGP Policy\nclient.sys.create_or_update_egp_policy(\n        name=\"test-egp-policy\", policy=policy, enforcement_level=\"hard-mandatory\", paths=[\"/test\"],\n    )\n</code></pre>"},{"location":"usage/system_backend/policies/#read-egp-policy","title":"Read EGP Policy","text":"<p><code>vaultx.api.system_backend.Policies.read_egp_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\n\npolicy = \"\"\"import \"time\"\nimport \"strings\"\n\nmain = rule when not strings.has_prefix(request.path, \"auth/ldap/login\") {\n    time.load(token.creation_time).unix &gt; time.load(\"2017-09-17T13:25:29Z\").unix\n}\n\"\"\"\n\n# Create EGP Policy\nclient.sys.create_or_update_egp_policy(\n        name=\"test-egp-policy\", policy=policy, enforcement_level=\"soft-mandatory\", paths=[\"/test\"]\n    )\n\nclient.sys.read_egp_policy(\"test-egp-policy\")\n</code></pre>"},{"location":"usage/system_backend/policies/#list-egp-policies","title":"List EGP Policies","text":"<p><code>vaultx.api.system_backend.Policies.list_egp_policies()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\n\npolicy = \"\"\"import \"time\"\nimport \"strings\"\n\nmain = rule when not strings.has_prefix(request.path, \"auth/ldap/login\") {\n    time.load(token.creation_time).unix &gt; time.load(\"2017-09-17T13:25:29Z\").unix\n}\n\"\"\"\n\nclient.sys.create_or_update_egp_policy(\n        name=\"test-egp-policy1\", policy=policy, enforcement_level=\"soft-mandatory\", paths=[\"/test\"]\n    )\nclient.sys.list_egp_policies()\n</code></pre>"},{"location":"usage/system_backend/policies/#delete-egp-policy","title":"Delete EGP Policy","text":"<p><code>vaultx.api.system_backend.Policies.delete_egp_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url=\"https://127.0.0.1:8200\")\nclient.sys.delete_egp_policy(\"test-egp-policy\")\n</code></pre>"},{"location":"usage/system_backend/policy/","title":"Policy","text":""},{"location":"usage/system_backend/policy/#create-or-update-policy","title":"Create or Update Policy","text":"<p><code>vaultx.api.system_backend.Policy.create_or_update_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\npolicy = '''\n    path \"sys\" {\n        capabilities = [\"deny\"]\n    }\n    path \"secret\" {\n        capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n    }\n'''\nclient.sys.create_or_update_policy(\n    name='secret-writer',\n    policy=policy,\n)\n</code></pre>"},{"location":"usage/system_backend/policy/#read-policy","title":"Read Policy","text":"<p><code>vaultx.api.system_backend.Policy.read_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nvaultx_policy_rules = client.sys.read_policy(name='secret-writer')['data']['rules']\nprint('secret-writer policy rules:\\n%s' % vaultx_policy_rules)\n</code></pre>"},{"location":"usage/system_backend/policy/#list-policies","title":"List Policies","text":"<p><code>vaultx.api.system_backend.Policy.list_policies()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nlist_policies_resp = client.sys.list_policies()['data']['policies']\nprint('List of currently configured policies: %s' % ', '.join(list_policies_resp))\n</code></pre>"},{"location":"usage/system_backend/policy/#delete-policy","title":"Delete Policy","text":"<p><code>vaultx.api.system_backend.Policy.delete_policy()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.delete_policy(\n    name='secret-writer',\n)\n</code></pre>"},{"location":"usage/system_backend/quota/","title":"Quota","text":""},{"location":"usage/system_backend/quota/#create-or-update-a-quota","title":"Create or Update a Quota","text":"<p><code>vaultx.api.system_backend.Quota.create_or_update_quota()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\n# Create file quota\nclient.sys.create_or_update_quota(name=\"quota1\", rate=100.0)\n\n# Update quota that already exists\nclient.sys.create_or_update_quota(name=\"quota1\", rate=101.0)\n</code></pre>"},{"location":"usage/system_backend/quota/#read-quota","title":"Read Quota","text":"<p><code>vaultx.api.system_backend.Quota.read_quota()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\nclient.sys.create_or_update_quota(name=\"quota1\", rate=100.0)\n</code></pre>"},{"location":"usage/system_backend/quota/#list-quotas","title":"List Quotas","text":"<p><code>vaultx.api.system_backend.Quota.list_quotas()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.create_or_update_quota(name=\"quota1\", rate=1000.0, interval=\"10m\")\nclient.sys.create_or_update_quota(name=\"quota2\", rate=1000.0, path=\"/kv\")\n</code></pre>"},{"location":"usage/system_backend/quota/#delete-quota","title":"Delete Quota","text":"<p><code>vaultx.api.system_backend.Quota.delete_quota()</code></p> <pre><code>import vaultx\nclient = vaultx.Client(url='https://127.0.0.1:8200')\n\nclient.sys.delete_quota(name=\"quota1\")\n</code></pre>"},{"location":"usage/system_backend/raft/","title":"Raft","text":""},{"location":"usage/system_backend/raft/#join-raft-cluster","title":"Join Raft Cluster","text":"<p><code>vaultx.api.system_backend.Raft.join_raft_cluster()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.join_raft_cluster(\n    leader_api_addr='https://some-vault-node',\n)\n</code></pre>"},{"location":"usage/system_backend/raft/#read-raft-configuration","title":"Read Raft Configuration","text":"<p><code>vaultx.api.system_backend.Raft.read_raft_configuration()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nraft_config = c.sys.read_raft_config()\nnum_servers_in_cluster = len(raft_config['data']['config']['servers'])\n</code></pre>"},{"location":"usage/system_backend/raft/#remove-raft-node","title":"Remove Raft Node","text":"<p><code>vaultx.api.system_backend.Raft.remove_raft_node()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.remove_raft_node(\n    server_id='i-somenodeid',\n)\n</code></pre>"},{"location":"usage/system_backend/raft/#read-raft-auto-snapshot-status","title":"Read Raft Auto-Snapshot Status","text":"<p><code>vaultx.api.system_backend.Raft.read_raft_auto_snapshot_status()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.read_raft_auto_snapshot_status(\"my-local-auto-snapshot\")\n</code></pre>"},{"location":"usage/system_backend/raft/#read-raft-auto-snapshot-config","title":"Read Raft Auto-Snapshot Config","text":"<p><code>vaultx.api.system_backend.Raft.read_raft_auto_snapshot_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.read_raft_auto_snapshot_config(\"my-local-auto-snapshot\")\n</code></pre>"},{"location":"usage/system_backend/raft/#read-raft-auto-snapshot-configs","title":"Read Raft Auto-Snapshot Configs","text":"<p><code>vaultx.api.system_backend.Raft.list_raft_auto_snapshot_configs()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.list_raft_auto_snapshot_configs()\n</code></pre>"},{"location":"usage/system_backend/raft/#list-raft-auto-snapshot-configurations","title":"List Raft Auto-Snapshot Configurations","text":"<p><code>vaultx.api.system_backend.Raft.list_raft_auto_snapshot_configs()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.list_raft_auto_snapshot_configs()\n</code></pre>"},{"location":"usage/system_backend/raft/#create-or-update-raft-auto-snapshot-configuration","title":"Create or Update Raft Auto-Snapshot Configuration","text":"<p><code>vaultx.api.system_backend.Raft.create_or_update_raft_auto_snapshot_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.create_or_update_raft_auto_snapshot_config(\n    name=\"my-local-auto-snapshot\",\n    interval=\"1d\",\n    storage_type=\"local\",\n    retain=5,\n    local_max_space=\"100000\",\n    path_prefix=\"/opt/vault/backups\",\n    file_prefix=\"vault-raft-auto-snapshot\"\n)\n</code></pre>"},{"location":"usage/system_backend/raft/#delete-raft-auto-snapshot-configuration","title":"Delete Raft Auto-Snapshot Configuration\uf0c1","text":"<p><code>vaultx.api.system_backend.Raft.delete_raft_auto_snapshot_config()</code></p> <pre><code>import vaultx\nclient = vaultx.Client()\n\nclient.sys.delete_raft_auto_snapshot_config(\n    name=\"my-local-auto-snapshot\",\n)\n</code></pre>"},{"location":"usage/system_backend/seal/","title":"Seal","text":""},{"location":"usage/system_backend/seal/#seal-status","title":"Seal Status","text":"<p><code>vaultx.api.system_backend.Seal.seal_status()</code></p> <pre><code>import hvac\nclient = hvac.Client(url='https://127.0.0.1:8200')\n\nprint(f'Is Vault sealed: {client.seal_status['sealed']}')\n</code></pre>"},{"location":"usage/system_backend/seal/#is-sealed","title":"Is Sealed","text":"<p><code>vaultx.api.system_backend.Seal.is_sealed()</code></p> <pre><code>import hvac\nclient = hvac.Client(url='https://127.0.0.1:8200')\n\nprint('Is Vault sealed: %s' % client.sys.is_sealed())\n</code></pre>"},{"location":"usage/system_backend/seal/#read-seal-status","title":"Read Seal Status","text":"<p><code>vaultx.api.system_backend.Seal.read_seal_status()</code></p> <pre><code>import hvac\nclient = hvac.Client(url='https://127.0.0.1:8200')\n\nprint(f'Is Vault sealed: {client.sys.read_seal_status()['sealed']}')\n</code></pre>"},{"location":"usage/system_backend/seal/#seal_1","title":"Seal","text":"<p><code>vaultx.api.system_backend.Seal.seal()</code></p> <pre><code>import hvac\nclient = hvac.Client(url='https://127.0.0.1:8200')\n\nclient.sys.seal()\n</code></pre>"},{"location":"usage/system_backend/seal/#submit-unseal-key","title":"Submit Unseal Key","text":"<p><code>vaultx.api.system_backend.Seal.submit_unseal_key()</code></p> <pre><code>import hvac\nclient = hvac.Client(url='https://127.0.0.1:8200')\n\nclient.sys.submit_unseal_key(key=key)\n</code></pre>"},{"location":"usage/system_backend/seal/#submit-unseal-keys","title":"Submit Unseal Keys","text":"<p><code>vaultx.api.system_backend.Seal.submit_unseal_keys()</code></p> <pre><code>import hvac\nclient = hvac.Client(url='https://127.0.0.1:8200')\n\nclient.sys.submit_unseal_keys(keys=keys)\n</code></pre>"},{"location":"usage/system_backend/wrapping/","title":"Wrapping","text":""},{"location":"usage/system_backend/wrapping/#unwrap","title":"Unwrap","text":"<p><code>vaultx.api.system_backend.Wrapping.unwrap()</code></p> <pre><code>import vaultx\n\nclient = vaultx.Client(url='https://127.0.0.1:8200')\nclient.write(\n    path=\"auth/approle-test/role/testrole\",\n)\n\nresult = client.write(\n    path='auth/approle-test/role/testrole/secret-id',\n    wrap_ttl=\"10s\",\n)\n\nunwrap_response = client.sys.unwrap(\n    token=result['wrap_info']['token'],\n)\nprint(f'Unwrapped approle role token secret id accessor: {unwrap_response['data']['secret_id_accessor']}')\n</code></pre>"}]}